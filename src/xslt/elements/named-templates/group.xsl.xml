<cm:component xmlns:cm="http://www.agencexml.com/cm" name="group.xsl">
	<cm:author>Alain Couthures</cm:author>
	<cm:creationdate>2009-04-08</cm:creationdate>
	<cm:lastupdate>2009-04-08</cm:lastupdate>
	<cm:licence>
Copyright (C) 2008-2010 agenceXML - Alain COUTHURES
Contact at : info@agencexml.com

Copyright (C) 2006 AJAXForms S.L.
Contact at: info@ajaxforms.com

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
	</cm:licence>
	<cm:source type="application/xml">
		<xsl:template name="group" xmlns:svg="http://www.w3.org/2000/svg" xmlns:xhtml="http://www.w3.org/1999/xhtml" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:xforms="http://www.w3.org/2002/xforms">
			<xsl:param name="workid"/>
			<xsl:param name="type" select="'group'"/>
			<xsl:param name="appearance" select="@appearance"/>
			<xsl:choose>
				<xsl:when test="$type = 'repeat'">
					<xsl:variable name="mainelt">
						<xsl:choose>
							<xsl:when test="parent::*[local-name()='table' or @appearance='table']">tbody</xsl:when>
							<xsl:when test="parent::*[local-name()='thead' or @appearance='table-head']">thead</xsl:when>
							<xsl:when test="parent::*[local-name()='tbody' or @appearance='table-body']">tbody</xsl:when>
							<xsl:when test="parent::*[local-name()='tfoot' or @appearance='table-foot']">tfoot</xsl:when>
							<xsl:when test="parent::*[local-name()='tr' or @appearance='table-row']">tr</xsl:when>
							<xsl:when test="ancestor::*[namespace-uri() = 'http://www.w3.org/2000/svg']">g</xsl:when>
							<xsl:otherwise>div</xsl:otherwise>
						</xsl:choose>
					</xsl:variable>
					<xsl:variable name="mainns">
						<xsl:if test="$mainelt = 'g'">http://www.w3.org/2000/svg</xsl:if>
					</xsl:variable>
					<xsl:element name="{$mainelt}" namespace="{$mainns}">
						<xsl:call-template name="genid">
							<xsl:with-param name="workid" select="$workid"/>
						</xsl:call-template>
						<xsl:call-template name="style">
							<xsl:with-param name="class">
								<xsl:choose>
									<xsl:when test="$mainelt != 'div' and $mainelt != 'g' and parent::*/parent::xforms:repeat">xforms-repeat xforms-repeat-item</xsl:when>
									<xsl:when test="$mainelt = 'g'">xforms-repeat xforms-svg-repeat</xsl:when>
									<xsl:otherwise>xforms-repeat</xsl:otherwise>
								</xsl:choose>
							</xsl:with-param>
						</xsl:call-template>
						<xsl:if test="$mainelt != 'div' and $mainelt != 'g' and parent::*/parent::xforms:repeat">
							<xsl:attribute name="mixedrepeat">true</xsl:attribute>
						</xsl:if>
						<xsl:if test="parent::*[local-name()='table' or @appearance='table']">
							<xsl:apply-templates select="preceding-sibling::node()">
								<xsl:with-param name="parentworkid" select="substring-after($workid,'_')"/>
							</xsl:apply-templates>
						</xsl:if>
						<xsl:variable name="itemelt">
							<xsl:choose>
								<xsl:when test="parent::*[local-name()='table' or local-name()='thead' or local-name()='tbody' or local-name()='tfoot' or @appearance='table' or @appearance='table-head' or @appearance='table-body' or @appearance='table-foot']">tr</xsl:when>
								<xsl:when test="parent::*[local-name()='tr' or @appearance='table-row'] and ancestor::*[2][local-name()='thead' or @appearance='table-head']">th</xsl:when>
								<xsl:when test="parent::*[local-name()='tr' or @appearance='table-row']">td</xsl:when>
								<xsl:when test="ancestor::*[namespace-uri() = 'http://www.w3.org/2000/svg']">g</xsl:when>
								<xsl:otherwise>div</xsl:otherwise>
							</xsl:choose>
						</xsl:variable>
						<xsl:variable name="itemns">
							<xsl:if test="$mainelt = 'g'">http://www.w3.org/2000/svg</xsl:if>
						</xsl:variable>
						<xsl:element name="{$itemelt}" namespace="{$itemns}">
							<xsl:attribute name="class">xforms-repeat-item</xsl:attribute>
							<xsl:apply-templates select="node()">
								<xsl:with-param name="parentworkid" select="$workid"/>
								<xsl:with-param name="appearance">
									<xsl:if test="$appearance = 'minimal'">minimal</xsl:if>
								</xsl:with-param>
							</xsl:apply-templates>
						</xsl:element>
						<xsl:if test="parent::*[local-name()='table']">
							<xsl:apply-templates select="following-sibling::node()">
								<xsl:with-param name="parentworkid" select="substring-after($workid,'_')"/>
							</xsl:apply-templates>
						</xsl:if>
					</xsl:element>
				</xsl:when>
				<xsl:when test="$appearance = 'compact'">
					<span>
						<xsl:call-template name="genid">
							<xsl:with-param name="workid" select="$workid"/>
						</xsl:call-template>
						<xsl:call-template name="style">
							<xsl:with-param name="class">xforms-<xsl:value-of select="$type"/></xsl:with-param>
						</xsl:call-template>
						<xsl:if test="$type = 'case' and (not(@selected) or @selected != 'true')">
							<xsl:attribute name="style">display:none;</xsl:attribute>
						</xsl:if>
						<xsl:if test="xforms:label">
							<xsl:apply-templates select="node()">
								<xsl:with-param name="parentworkid" select="$workid"/>
								<xsl:with-param name="appearance" select="'caption'"/>
							</xsl:apply-templates>
						</xsl:if>
						<xsl:for-each select="node()">
							<xsl:choose>
								<xsl:when test="namespace-uri() = 'http://www.w3.org/2002/xforms' and ((not(xforms:label) and local-name() != 'label') or local-name() = 'trigger' or local-name() = 'submit')">
									<span class="xforms-label">&#160;</span>
								</xsl:when>
								<xsl:otherwise>
									<xsl:apply-templates select="node()">
										<xsl:with-param name="parentworkid" select="concat(position(),'_',$workid)"/>
										<xsl:with-param name="appearance" select="'table'"/>
									</xsl:apply-templates>
								</xsl:otherwise>
							</xsl:choose>
						</xsl:for-each>
						<xsl:if test="$type = 'repeat'">
							<xsl:attribute name="class">xforms-repeat-item</xsl:attribute>
						</xsl:if>
						<xsl:for-each select="node()">
							<xsl:if test="contains(':input:output:select:select1:textarea:secret:group:repeat:switch:trigger:submit:',concat(':',local-name(),':'))">
								<span>
									<xsl:apply-templates select=".">
										<xsl:with-param name="parentworkid" select="$workid"/>
										<xsl:with-param name="appearance" select="'none'"/>
									</xsl:apply-templates>
								</span>
							</xsl:if>
						</xsl:for-each>
					</span>
				</xsl:when>
				<xsl:when test="$appearance = 'minimal'">
					<fieldset>
						<xsl:call-template name="genid">
							<xsl:with-param name="workid" select="$workid"/>
						</xsl:call-template>
						<xsl:call-template name="style">
							<xsl:with-param name="class">xforms-<xsl:value-of select="$type"/>
							</xsl:with-param>
						</xsl:call-template>
						<xsl:if test="$type = 'case' and (not(@selected) or @selected != 'true')">
							<xsl:attribute name="style">display:none;</xsl:attribute>
						</xsl:if>
						<xsl:apply-templates select="node()">
							<xsl:with-param name="parentworkid" select="$workid"/>
							<xsl:with-param name="appearance">minimal</xsl:with-param>
						</xsl:apply-templates>
					</fieldset>
				</xsl:when>
				<xsl:otherwise>
					<xsl:variable name="mainelt">
						<xsl:choose>
							<xsl:when test="$appearance='table'">table</xsl:when>
							<xsl:when test="$appearance='table-caption'">caption</xsl:when>
							<xsl:when test="parent::*[local-name()='table'] or $appearance='table-body'">tbody</xsl:when>
							<xsl:when test="parent::*[local-name()='thead'] or $appearance='table-head'">thead</xsl:when>
							<xsl:when test="parent::*[local-name()='tbody']">tbody</xsl:when>
							<xsl:when test="parent::*[local-name()='tfoot'] or $appearance='table-foot'">tfoot</xsl:when>
							<xsl:when test="parent::*[local-name()='tr'] or $appearance='table-row'">tr</xsl:when>
							<xsl:when test="$appearance='table-cell'">td</xsl:when>
							<xsl:when test="ancestor::*[namespace-uri() = 'http://www.w3.org/2000/svg']">g</xsl:when>
							<xsl:otherwise>div</xsl:otherwise>
						</xsl:choose>
					</xsl:variable>
					<xsl:variable name="mainns">
						<xsl:if test="$mainelt = 'g'">http://www.w3.org/2000/svg</xsl:if>
					</xsl:variable>
					<xsl:element name="{$mainelt}" namespace="{$mainns}">
						<xsl:call-template name="genid">
							<xsl:with-param name="workid" select="$workid"/>
						</xsl:call-template>
						<xsl:call-template name="style">
							<xsl:with-param name="class">
								<xsl:choose>
									<xsl:when test="$mainelt = 'g'">xforms-<xsl:value-of select="$type"/> xforms-svg-<xsl:value-of select="$type"/></xsl:when>
									<xsl:otherwise>xforms-<xsl:value-of select="$type"/></xsl:otherwise>
								</xsl:choose>
							</xsl:with-param>
						</xsl:call-template>
						<xsl:if test="@navindex">
							<xsl:attribute name="tabindex"><xsl:value-of select="@navindex + 1"/></xsl:attribute>
						</xsl:if>
						<xsl:if test="$type = 'case' and (not(@selected) or @selected != 'true')">
							<xsl:attribute name="style">display:none;</xsl:attribute>
						</xsl:if>
						<xsl:choose>
							<xsl:when test="starts-with($appearance, 'table')">
								<xsl:apply-templates select="node()">
									<xsl:with-param name="parentworkid" select="$workid"/>
									<xsl:with-param name="appearance" select="'groupNone'"/>
								</xsl:apply-templates>
							</xsl:when>
							<xsl:otherwise>
								<xsl:for-each select="node()">
									<xsl:if test="self::xforms:label">
										<xsl:apply-templates select=".">
											<xsl:with-param name="workid" select="concat(position(),'_',$workid)"/>
											<xsl:with-param name="appearance" select="'groupTitle'"/>
										</xsl:apply-templates>
									</xsl:if>
								</xsl:for-each>
								<xsl:variable name="itemelt">
									<xsl:choose>
										<xsl:when test="parent::*[local-name()='table' or local-name()='thead' or local-name()='tbody' or local-name()='tfoot']">tr</xsl:when>
										<xsl:when test="parent::*[local-name()='tr']">td</xsl:when>
										<xsl:when test="ancestor::*[namespace-uri() = 'http://www.w3.org/2000/svg']">g</xsl:when>
										<xsl:otherwise>div</xsl:otherwise>
									</xsl:choose>
								</xsl:variable>
								<xsl:variable name="itemns">
									<xsl:if test="$mainelt = 'g'">http://www.w3.org/2000/svg</xsl:if>
								</xsl:variable>
								<xsl:element name="{$itemelt}" namespace="{$itemns}">
									<xsl:attribute name="class">xforms-<xsl:value-of select="$type"/>-content</xsl:attribute>
									<xsl:apply-templates select="node()">
										<xsl:with-param name="parentworkid" select="$workid"/>
										<xsl:with-param name="appearance" select="'groupNone'"/>
									</xsl:apply-templates>
								</xsl:element>
							</xsl:otherwise>
						</xsl:choose>
					</xsl:element>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:template>
	</cm:source>
</cm:component>