<cm:component xmlns:cm="http://www.agencexml.com/cm" name="calc.xsl">
	<cm:author>Alain Couthures</cm:author>
	<cm:creationdate>2009-04-08</cm:creationdate>
	<cm:lastupdate>2009-04-08</cm:lastupdate>
	<cm:licence>
Copyright (C) 2008-2010 agenceXML - Alain COUTHURES
Contact at : info@agencexml.com

Copyright (C) 2006 AJAXForms S.L.
Contact at: info@ajaxforms.com

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
	</cm:licence>
	<cm:source type="application/xml">
		<xsl:template name="calc" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
			<xsl:param name="args"/>
			<xsl:param name="ops"/>
			<xsl:param name="opprec"/>
			<xsl:choose>
				<xsl:when test="$ops='' or number(substring-before(substring-after($ops,'.'),'.')) &gt; number($opprec)">
					<xsl:value-of select="concat(string-length($args),'.',$args,string-length($ops),'.',$ops)"/>
				</xsl:when>
				<xsl:otherwise>
					<xsl:variable name="op" select="substring-after(substring(substring-after($ops,'.'),1,substring-before($ops,'.')),'.')"/>
					<xsl:variable name="arg2len" select="substring-before($args,'.')"/>
					<xsl:variable name="arg2val" select="substring(substring-after($args,'.'),1,number($arg2len))"/>
					<xsl:variable name="args3" select="substring($args,string-length($arg2len)+2+number($arg2len))"/>
					<xsl:variable name="arg1len" select="substring-before($args3,'.')"/>
					<xsl:variable name="arg1val" select="substring(substring-after($args3,'.'),1,number($arg1len))"/>
					<xsl:variable name="arg">
						<xsl:choose>
							<xsl:when test="$op = ','">
								<xsl:value-of select="$arg1val"/>
								<xsl:text>,</xsl:text>
								<xsl:value-of select="$arg2val"/>
							</xsl:when>
							<xsl:when test="$op = '/'">
								<xsl:text>new XsltForms_pathExpr(</xsl:text>
								<xsl:value-of select="$arg1val"/>
								<xsl:text>,</xsl:text>
								<xsl:value-of select="$arg2val"/>
								<xsl:text>)</xsl:text>
							</xsl:when>
							<xsl:when test="$op = '|'">
								<xsl:text>new XsltForms_unionExpr(</xsl:text>
								<xsl:value-of select="$arg1val"/>
								<xsl:text>,</xsl:text>
								<xsl:value-of select="$arg2val"/>
								<xsl:text>)</xsl:text>
							</xsl:when>
							<xsl:otherwise>
								<xsl:text>new XsltForms_binaryExpr(</xsl:text>
								<xsl:value-of select="$arg1val"/>
								<xsl:text>,'</xsl:text>
								<xsl:value-of select="$op"/>
								<xsl:text>',</xsl:text>
								<xsl:value-of select="$arg2val"/>
								<xsl:text>)</xsl:text>
							</xsl:otherwise>
						</xsl:choose>
					</xsl:variable>
					<xsl:variable name="args2" select="concat(string-length($arg),'.',$arg,substring($args3,string-length($arg1len)+2+number($arg1len)))"/>
					<xsl:call-template name="calc">
						<xsl:with-param name="args" select="$args2"/>
						<xsl:with-param name="ops" select="substring(substring-after($ops,'.'),number(substring-before($ops,'.'))+1)"/>
						<xsl:with-param name="opprec" select="$opprec"/>
					</xsl:call-template>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:template>
	</cm:source>
</cm:component>