<cm:component xmlns:cm="http://www.agencexml.com/cm" name="html.xsl">
	<cm:author>Alain Couthures</cm:author>
	<cm:creationdate>2009-04-08</cm:creationdate>
	<cm:lastupdate>2012-06-27</cm:lastupdate>
	<cm:licence>
Copyright (C) 2008-2011 agenceXML - Alain COUTHURES
Contact at : info@agencexml.com

Copyright (C) 2006 AJAXForms S.L.
Contact at: info@ajaxforms.com

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
	</cm:licence>
	<cm:source type="application/xml">
		<xsl:template match="xhtml:html | html" xmlns:xhtml="http://www.w3.org/1999/xhtml" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:xforms="http://www.w3.org/2002/xforms" xmlns:ev="http://www.w3.org/2001/xml-events" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msxsl="urn:schemas-microsoft-com:xslt" xmlns:exslt="http://exslt.org/common" xmlns:xalan="http://xml.apache.org/xalan">
			<xsl:choose>
				<xsl:when test="function-available('xalan:nodeset')">
					<xsl:call-template name="html">
						<xsl:with-param name="script" select="xalan:nodeset($script0)/*"/>
					</xsl:call-template>
				</xsl:when>
				<xsl:when test="function-available('exslt:node-set')">
					<xsl:call-template name="html">
						<xsl:with-param name="script" select="exslt:node-set($script0)/*"/>
					</xsl:call-template>
				</xsl:when>
				<xsl:when test="function-available('msxsl:node-set')">
					<xsl:call-template name="html">
						<xsl:with-param name="script" select="msxsl:node-set($script0)/*"/>
					</xsl:call-template>
				</xsl:when>
				<xsl:otherwise>
					<xsl:variable name="script00" select="$script0"/>
					<xsl:call-template name="html">
						<xsl:with-param name="script" select="$script00/*"/>
					</xsl:call-template>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:template>
		<xsl:template name="html" xmlns:xhtml="http://www.w3.org/1999/xhtml" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:xforms="http://www.w3.org/2002/xforms" xmlns:ev="http://www.w3.org/2001/xml-events" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msxsl="urn:schemas-microsoft-com:xslt" xmlns:exslt="http://exslt.org/common" xmlns:xalan="http://xml.apache.org/xalan">
			<xsl:param name="script"/>
			<!-- figure out what directory the XSL is loaded from and use it for everything else -->
			<xsl:variable name="pivalue" select="translate(normalize-space(/processing-instruction('xml-stylesheet')[1]), ' ', '')"/>
			<xsl:variable name="hrefquote" select="substring(substring-after($pivalue, 'href='), 1, 1)"/>
			<xsl:variable name="href" select="substring-before(substring-after($pivalue, concat('href=', $hrefquote)), $hrefquote)"/>
			<xsl:variable name="resourcesdir">
				<xsl:choose>
					<xsl:when test="$baseuri != ''">
						<xsl:value-of select="$baseuri"/>
					</xsl:when>
					<xsl:when test="$xsltforms_home != ''">
						<xsl:value-of select="$xsltforms_home"/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:value-of select="substring-before($href, 'xsltforms.xsl')"/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:variable>
			<html>
				<xsl:copy-of select="@*"/>
				<xsl:comment>HTML elements and Javascript instructions generated by XSLTForms r<cm:value name="versionNumber"/> - Copyright (C) 2008-<cm:value name="year"/> &lt;agenceXML&gt; - Alain COUTHURES - http://www.agencexml.com</xsl:comment>
				<xsl:variable name="option"> debug="yes" </xsl:variable>
				<xsl:variable name="optionno"> debug="no" </xsl:variable>
				<xsl:variable name="displaydebug">
					<xsl:choose>
						<xsl:when test="$xsltforms_debug != ''"><xsl:value-of select="$xsltforms_debug"/></xsl:when>
						<xsl:when test="contains(concat(' ',translate(normalize-space(/processing-instruction('xsltforms-options')[1]), 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz'),' '),$option)">true</xsl:when>
						<xsl:when test="contains(concat(' ',translate(normalize-space(/processing-instruction('xsltforms-options')[1]), 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz'),' '),$optionno)">false</xsl:when>
						<xsl:when test="$script/config/options/debug">true</xsl:when>
						<xsl:otherwise>false</xsl:otherwise>
					</xsl:choose>
				</xsl:variable>
				<xsl:variable name="initdebug">
					<xsl:if test="$displaydebug = 'true'">XsltForms_globals.debugMode = true;XsltForms_globals.debugging();</xsl:if>
				</xsl:variable>
				<head>
					<xsl:copy-of select="xhtml:head/@* | head/@*"/>
					<meta http-equiv="Content-Type" content="text/html;charset=utf-8" />
					<xsl:for-each select="xhtml:head/xhtml:meta[string(@http-equiv) != 'Content-Type'] | head/meta[string(@http-equiv) != 'Content-Type']">
						<meta>
							<xsl:copy-of select="@*"/>
						</meta>
					</xsl:for-each>
					<script type="text/javascript" id="xsltforms-initialdate">
						<xsl:text>CKEDITOR = null;
</xsl:text>
						<xsl:text>var xsltforms_d0 = new Date();
</xsl:text>
						<xsl:text>XsltForms_domEngine = "</xsl:text>
						<xsl:if test="$domengine != ''">
							<xsl:value-of select="substring-before(substring-after($domengine, 'uri='), ';')"/>
						</xsl:if>
						<xsl:text>";
</xsl:text>
						<xsl:text>XsltForms_xpathEngine = "</xsl:text>
						<xsl:if test="$script/config/properties/xpathengine">
							<xsl:value-of select="$script/config/properties/xpathengine/@uri"/>
						</xsl:if>
						<xsl:text>";
</xsl:text>
					</script>
					<link type="text/css" href="{$resourcesdir}xsltforms.css" rel="stylesheet"/>
					<xsl:apply-templates select="xhtml:head/xhtml:*[local-name() != 'script' and local-name() != 'style' and local-name() != 'link' and local-name() != 'meta'] | xhtml:head/comment() | head/title | head/comment()" mode="nons"/>
					<xsl:apply-templates select="xhtml:head/xhtml:style | xhtml:head/xhtml:link | head/style | head/link">
						<xsl:with-param name="config" select="$script/config"/>
					</xsl:apply-templates>
					<xsl:if test="$domengine != ''">
						<script type="text/javascript" id="{substring-before(substring-after($domengine, 'name='), ';')}-src" src="{substring-before(substring-after($domengine, 'url='), ';')}" data-uri="{substring-before(substring-after($domengine, 'uri='), ';')}" data-version="{substring-before(substring-after($domengine, 'version='), ';')}">
							<xsl:text>/* */</xsl:text>
						</script>
					</xsl:if>
					<xsl:if test="$script/config/properties/xpathengine and $script/config/properties/xpathengine/@url != $script/config/properties/domengine/@url">
						<script type="text/javascript" id="{$script/config/properties/xpathengine/@name}-src" src="{$script/config/properties/xpathengine/@url}" data-uri="{$script/config/properties/domengine/@uri}" data-version="{$script/config/properties/xpathengine/@version}">
							<xsl:text>/* */</xsl:text>
						</script>
					</xsl:if>
					<xsl:variable name="jsrevision"><xsl:if test="$script/config/properties/jsrevision != ''">?<xsl:value-of select="$script/config/properties/jsrevision"/>=<cm:value name="versionNumber"/></xsl:if></xsl:variable>
					<script type="text/javascript" id="xsltforms-src" src="{$resourcesdir}xsltforms.js{$jsrevision}" data-uri="http://www.agencexml.com/xsltforms">
						<xsl:attribute name="data-version"><cm:value name="versionNumber"/></xsl:attribute>
						<xsl:text>/* */</xsl:text>
					</script>
					<xsl:for-each select="$script/config/jsextensions">
						<script id="xsltforms-jsextension{position()}" src="{$resourcesdir}{.}" type="text/javascript">/* */</script>
					</xsl:for-each>
					<xsl:apply-templates select="xhtml:head/xhtml:script | head/script"/>
					<xsl:if test="not($script/config/extensions/beforeInit) and not($script/config/extensions/onBeginInit) and not($script/config/extensions/onEndInit) and not($script/config/extensions/afterInit)">
						<xsl:copy-of select="$script/config/extensions/*"/>
					</xsl:if>
					<xsl:copy-of select="$script/config/extensions/beforeInit/*"/>
					<script type="text/javascript" id="xsltforms-generatedscript">
						<xsl:text>/* XsltForms_MagicSeparator */
</xsl:text>
						<xsl:text>function </xsl:text>
						<xsl:value-of select="$vn_pf"/>
						<xsl:text>initImpl() {
</xsl:text>
						<xsl:text>XsltForms_globals.language = "</xsl:text>
						<xsl:choose>
							<xsl:when test="$configlang != ''">
								<xsl:value-of select="$configlang"/>
							</xsl:when>
							<xsl:otherwise>default</xsl:otherwise>
						</xsl:choose>
						<xsl:text>";
</xsl:text>
						<xsl:text>XsltForms_globals.loadingMsg = "</xsl:text>
						<xsl:call-template name="escapeJS">
							<xsl:with-param name="text" select="$script/config/properties/status"/>
							<xsl:with-param name="trtext" select="translate($script/config/properties/status,concat(' ',$newline,$carriagereturn,$quot,$apos),concat($tab,$tab,$tab,$tab,$tab))"/>
						</xsl:call-template>
						<xsl:text>";
</xsl:text>
						<xsl:text>XsltForms_globals.valuesSeparator = "</xsl:text>
						<xsl:variable name="vsep" select="$script/config/properties/valuesseparator"/>
						<xsl:choose>
							<xsl:when test="$vsep != ''">
								<xsl:call-template name="escapeJS">
									<xsl:with-param name="text" select="$vsep"/>
									<xsl:with-param name="trtext" select="translate($vsep,concat(' ',$newline,$carriagereturn,$quot,$apos),concat($tab,$tab,$tab,$tab,$tab))"/>
								</xsl:call-template>
							</xsl:when>
							<xsl:otherwise><xsl:text>\x20</xsl:text></xsl:otherwise>
						</xsl:choose>
						<xsl:text>";
</xsl:text>
						<xsl:text>XsltForms_globals.debugMode = </xsl:text>
						<xsl:value-of select="$displaydebug"/>
						<xsl:text>;
</xsl:text>
						<xsl:variable name="xsltversion">
							<xsl:if test="system-property('xsl:vendor')='Microsoft'">
								<xsl:value-of select="system-property('msxsl:version')"/>
							</xsl:if>
						</xsl:variable>
						<xsl:text>XsltForms_globals.xsltEngine = "</xsl:text>
						<xsl:variable name="xsltengine" select="concat(system-property('xsl:vendor'),' ',system-property('xsl:vendor-url'),' ',$xsltversion)"/>
						<xsl:call-template name="escapeJS">
							<xsl:with-param name="text" select="$xsltengine"/>
							<xsl:with-param name="trtext" select="translate($xsltengine,concat(' ',$newline,$carriagereturn,$quot,$apos),concat($tab,$tab,$tab,$tab,$tab))"/>
						</xsl:call-template>
						<xsl:text>";
</xsl:text>
						<xsl:text>XsltForms_browser.jsFileName='xsltforms.js';
</xsl:text>
						<xsl:text>XsltForms_browser.isXhtml = false;
</xsl:text>
						<xsl:text>XsltForms_browser.config = null;
</xsl:text>
						<xsl:text>var xsltforms_subform_eltid = null;
</xsl:text>
						<xsl:text>var xsltforms_parentform = null;
</xsl:text>
						<xsl:text>/* XsltForms_MagicSeparator */ try {
</xsl:text>
						<xsl:for-each select="$script/collect/function">
							<xsl:value-of select="."/>
						</xsl:for-each>
						<xsl:text>XsltForms_browser.dialog.show('statusPanel');
</xsl:text>
						<xsl:text>XsltForms_globals.ltchar = "&lt;"; XsltForms_browser.isEscaped = XsltForms_globals.ltchar.length != 1;
</xsl:text>
						<xsl:text>var </xsl:text>
						<xsl:value-of select="$vn_subform"/>
						<xsl:text> = new XsltForms_subform(xsltforms_parentform, "</xsl:text>
						<xsl:value-of select="$doc_id"/>
						<xsl:text>", xsltforms_subform_eltid);
</xsl:text>
						<xsl:text>if (xsltforms_subform.id === "xsltforms-mainform") {
</xsl:text>
						<xsl:text>var d1 = new Date();
</xsl:text>
						<xsl:text>XsltForms_globals.htmltime = d1 - xsltforms_d0;
</xsl:text>
						<xsl:value-of select="$script/config/extensions/onBeginInit"/>
						<xsl:text>}
</xsl:text>
						<xsl:for-each select="$script/collect/schema">
							<xsl:call-template name="loadschemas">
								<xsl:with-param name="schemas" select="normalize-space(.)"/>
							</xsl:call-template>
						</xsl:for-each>
						<xsl:for-each select="$script/collect/type">
							<xsl:variable name="nstype" select="substring-before(.,':')"/>
							<xsl:variable name="typename" select="substring-after(.,':')"/>
							<xsl:if test="not(preceding-sibling::type[starts-with(.,$nstype)])">
								<xsl:variable name="nsmodel"><xsl:for-each select="$script/collect/schema"><xsl:value-of select="document(.,/)/*[descendant::*[@name = $typename]]/@targetNamespace"/></xsl:for-each></xsl:variable>
								<xsl:variable name="nsuri">
									<xsl:choose>
										<xsl:when test="../namespace[@name=$nstype]"><xsl:value-of select="../namespace[@name=$nstype][1]"/></xsl:when>
										<xsl:when test="../simpleType[@name = $typename]"><xsl:value-of select="../simpleType[@name = $typename]/@targetNamespace"/></xsl:when>
										<xsl:when test="$nsmodel != ''"><xsl:value-of select="$nsmodel"/></xsl:when>
										<xsl:when test="$nstype = 'xs' or $nstype = 'xsd'">http://www.w3.org/2001/XMLSchema</xsl:when>
										<xsl:when test="$nstype = 'xf' or $nstype = 'xform'">http://www.w3.org/2002/xforms</xsl:when>
										<xsl:when test="$nstype = 'xsltforms'">http://www.agencexml.com/xsltforms</xsl:when>
										<xsl:when test="$nstype = 'rte'">http://www.agencexml.com/xsltforms/rte</xsl:when>
										<xsl:otherwise>unknown (prefix:<xsl:value-of select="$nstype"/>)</xsl:otherwise>
									</xsl:choose>
								</xsl:variable>
								<xsl:text>XsltForms_schema.registerPrefix('</xsl:text><xsl:value-of select="$nstype"/><xsl:text>', '</xsl:text><xsl:value-of select="$nsuri"/><xsl:text>');
</xsl:text>
							</xsl:if>
						</xsl:for-each>
						<xsl:call-template name="xps">
							<xsl:with-param name="ps" select="$script/collect"/>
						</xsl:call-template>
						<xsl:for-each select="$script/collect/js">
							<xsl:value-of select="."/><xsl:text>
</xsl:text>
						</xsl:for-each>
						<xsl:text>XsltForms_browser.dialog.show('statusPanel');
</xsl:text>
						<xsl:text>if (xsltforms_subform.id === "xsltforms-mainform") {
</xsl:text>
						<xsl:text>XsltForms_browser.idPf = </xsl:text>
						<xsl:value-of select="$jsid_pf"/>
						<xsl:text>";
</xsl:text>
						<xsl:text>var </xsl:text>
						<xsl:value-of select="$vn_pf"/>
						<xsl:text>model_config = new XsltForms_model(</xsl:text>
						<xsl:value-of select="$vn_subform"/>
						<xsl:text>,</xsl:text>
						<xsl:value-of select="$jsid_pf"/>
						<xsl:text>model-config",null);
</xsl:text>
						<xsl:text>var </xsl:text>
						<xsl:value-of select="$vn_pf"/>
						<xsl:text>instance_config = new XsltForms_instance(</xsl:text>
						<xsl:value-of select="$vn_subform"/>
						<xsl:text>,</xsl:text>
						<xsl:value-of select="$jsid_pf"/>
						<xsl:text>instance-config",</xsl:text>
						<xsl:value-of select="$vn_pf"/>
						<xsl:text>model_config,true,'application/xml',null,'</xsl:text>
						<xsl:choose>
							<xsl:when test="$xsltforms_config != ''">
								<xsl:value-of select="normalize-space($xsltforms_config)"/>
							</xsl:when>
							<xsl:otherwise>
								<xsl:apply-templates select="$script/config/properties" mode="xml2string">
									<xsl:with-param name="root" select="true()"/>
								</xsl:apply-templates>
							</xsl:otherwise>
						</xsl:choose>
						<xsl:text>');
</xsl:text>
						<xsl:text>XsltForms_browser.config = </xsl:text>
						<xsl:value-of select="$vn_pf"/>
						<xsl:text>instance_config.doc.documentElement;
</xsl:text>
						<xsl:text>var d2 = new Date();
</xsl:text>
						<xsl:text>XsltForms_globals.creatingtime = d2 - d1;
</xsl:text>
						<xsl:text>XsltForms_globals.init();
</xsl:text>
						<xsl:value-of select="$script/config/extensions/onEndInit"/>
						<xsl:text>var d3 = new Date();
</xsl:text>
						<xsl:text>XsltForms_globals.inittime = d3 - d2;
</xsl:text>
						<xsl:text>} else {
</xsl:text>
						<xsl:text>xsltforms_subform.construct();
</xsl:text>
						<xsl:text>var sf = document.getElementById(xsltforms_subform_eltid).xfElement;
</xsl:text>
						<xsl:text>if (!sf || !sf.isComponent) {</xsl:text>
						<xsl:text>XsltForms_globals.openAction("XsltForms_subform.prototype.construct");
</xsl:text>
						<xsl:text>XsltForms_globals.closeChanges(true);
</xsl:text>
						<xsl:text>XsltForms_globals.closeAction("XsltForms_subform.prototype.construct");
</xsl:text>
						<xsl:text>}
</xsl:text>
						<xsl:text>XsltForms_browser.dialog.hide('statusPanel');
</xsl:text>
						<xsl:text>}
</xsl:text>
						<xsl:for-each select="$script/collect/case">
							<xsl:value-of select="."/>
						</xsl:for-each>
						<xsl:text>} catch (e) {
</xsl:text>
						<xsl:text>try {console.log(e);} catch(e2) {}
</xsl:text>
						<xsl:text>XsltForms_browser.dialog.hide('statusPanel');
</xsl:text>
						<xsl:text>if (!XsltForms_globals.debugMode) {
</xsl:text>
						<xsl:text>XsltForms_globals.debugMode = true;
</xsl:text>
						<xsl:text>XsltForms_globals.debugging();
</xsl:text>
						<xsl:text>}
</xsl:text>
						<xsl:text>alert("XSLTForms\x20Exception\n--------------------------\n\nError\x20initializing\x20:\n\n"+(!e || typeof(e.stack)=="undefined"?"":e.stack)+"\n\n"+(!e || !e.name?e:e.name+(e.message?"\n\n"+e.message:"")));
</xsl:text>
						<xsl:text>} /* XsltForms_MagicSeparator */ };
</xsl:text>
						<xsl:if test="$xsltforms_caller = 'true'">
							<xsl:text>if (window.xf_pre_init) xf_pre_init();</xsl:text><xsl:value-of select="$vn_pf"/><xsl:text>initImpl();if (window.xf_user_init) xf_user_init();</xsl:text>
							<xsl:value-of select="$initdebug"/>
							<xsl:value-of select="xhtml:body/@onload"/>
							<xsl:value-of select="body/@onload"/>
							<xsl:text>;
</xsl:text>
						</xsl:if>
					</script>
					<script type="text/javascript" id="xsltforms-launcher">
						<xsl:text>function </xsl:text>
						<xsl:value-of select="$vn_pf"/>
						<xsl:text>init() {
</xsl:text>
						<xsl:text>try {
</xsl:text>
						<xsl:text>if (window.xf_pre_init) xf_pre_init();
</xsl:text>
						<xsl:value-of select="$vn_pf"/>
						<xsl:text>initImpl();
</xsl:text>
						<xsl:text>if (window.xf_user_init) xf_user_init();
</xsl:text>
						<xsl:value-of select="$initdebug"/>
						<xsl:value-of select="xhtml:body/@onload"/>
						<xsl:value-of select="body/@onload"/>
						<xsl:text>;
</xsl:text>
						<xsl:text>} catch(e) {
</xsl:text>
						<xsl:text>try {console.log(e);} catch(e2) {}
</xsl:text>
						<xsl:text>alert("XSLTForms\x20Exception\n--------------------------\n\nIncorrect\x20Javascript\x20code\x20generation:\n\n"+(typeof(e.stack)=="undefined"?"":e.stack)+"\n\n"+(e.name?e.name+(e.message?"\n\n"+e.message:""):e));
</xsl:text>
						<xsl:text>}
</xsl:text>
						<xsl:text>}
</xsl:text>
						<xsl:if test="$xsltforms_caller != 'true'">
							<xsl:text>XsltForms_browser.events.attach(window, "load", </xsl:text>
							<xsl:value-of select="$vn_pf"/>
							<xsl:text>init);
</xsl:text>
						</xsl:if>
					</script>
					<xsl:copy-of select="$script/config/extensions/afterInit/*"/>
				</head>
				<body>
					<!--xsl:if test="$xsltforms_caller != 'true'">
						<xsl:attribute name="onload"><xsl:value-of select="$vn_pf"/>init();if (window.xf_user_init) xf_user_init();<xsl:value-of select="$initdebug"/><xsl:value-of select="xhtml:body/@onload"/><xsl:value-of select="body/@onload"/></xsl:attribute>
					</xsl:if-->
					<xsl:copy-of select="xhtml:body/@*[name() != 'onload'] | body/@*[name() != 'onload']"/>
					<xsl:comment>XsltForms_MagicSeparator</xsl:comment>
					<xsl:for-each select="$script/collect/message">
						<xsl:copy-of select="*"/>
					</xsl:for-each>
					<xsl:if test="$script/collect/dialog">
						<div id="xforms-dialog-surround">&#160;<xsl:text/></div>
					</xsl:if>
					<xsl:variable name="bodyworkid">
						<xsl:for-each select="node()">
							<xsl:if test="self::xhtml:body or self::body">
								<xsl:value-of select="concat(position(),'_')"/>
							</xsl:if>
						</xsl:for-each>
						<xsl:for-each select="/node()">
							<xsl:if test="self::xhtml:html or self::html">
								<xsl:value-of select="concat(position(),'_')"/>
							</xsl:if>
						</xsl:for-each>
					</xsl:variable>
					<xsl:apply-templates select="xhtml:body/node() | body/node()">
						<xsl:with-param name="parentworkid" select="$bodyworkid"/>
					</xsl:apply-templates>
					<xsl:comment>XsltForms_MagicSeparator</xsl:comment>
					<div id="xsltforms_console">&#160;<xsl:text/></div>
					<div id="statusPanel"><xsl:value-of select="$script/config/properties/status"/>&#160;<xsl:text/></div>
					<xsl:if test="$xsltforms_chain = 'true'">
						<script id="xsltforms-chain" type="text/javascript">
							<xsl:text>if (XsltForms_browser.isMozilla) {</xsl:text>
							<xsl:value-of select="$vn_pf"/><xsl:text>init();if (window.xf_user_init) xf_user_init();</xsl:text>
							<xsl:value-of select="$initdebug"/>
							<xsl:value-of select="xhtml:body/@onload"/>
							<xsl:value-of select="body/@onload"/>
							<xsl:text>;}
</xsl:text>
						</script>
					</xsl:if>
				</body>
			</html>
		</xsl:template>
	</cm:source>
</cm:component>