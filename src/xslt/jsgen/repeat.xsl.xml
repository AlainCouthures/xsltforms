<cm:component xmlns:cm="http://www.agencexml.com/cm" name="repeat.xsl">
	<cm:author>Alain Couthures</cm:author>
	<cm:creationdate>2009-04-08</cm:creationdate>
	<cm:lastupdate>2009-04-08</cm:lastupdate>
	<cm:licence>
Copyright (C) 2008-2010 agenceXML - Alain COUTHURES
Contact at : info@agencexml.com

Copyright (C) 2006 AJAXForms S.L.
Contact at: info@ajaxforms.com

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
	</cm:licence>
	<cm:source type="application/xml">
		<xsl:template match="xforms:repeat" mode="script" priority="1" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:xforms="http://www.w3.org/2002/xforms">
			<xsl:param name="parentworkid"/>
			<xsl:param name="workid" select="concat(position(),'_',$parentworkid)"/>
			<xsl:apply-templates select="@*" mode="scriptattr">
				<xsl:with-param name="workid" select="$workid"/>
			</xsl:apply-templates>
			<xsl:variable name="nodeset">
				<xsl:choose>
					<xsl:when test="@from and @to">
						<xsl:variable name="step">
							<xsl:choose>
								<xsl:when test="@step">
									<xsl:value-of select="@step"/>
								</xsl:when>
								<xsl:otherwise>1</xsl:otherwise>
							</xsl:choose>
						</xsl:variable>
						<xsl:value-of select="concat('fromtostep(',@from,',',@to,',',$step,')')"/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:value-of select="@nodeset | @ref"/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:variable>
			<xsl:if test="@from and @to">
				<xexpr xmlns=""><xsl:value-of select="$nodeset"/></xexpr>
			</xsl:if>
			<js xmlns="">
				<xsl:text>var </xsl:text>
				<xsl:value-of select="$vn_pf"/>
				<xsl:text>repeat_</xsl:text>
				<xsl:value-of select="$workid"/>
				<xsl:text> = new XsltForms_repeat(</xsl:text>
				<xsl:value-of select="$vn_subform"/>
				<xsl:text>,</xsl:text>
				<xsl:variable name="repeatid">
					<xsl:choose>
						<xsl:when test="self::*[count(xhtml:tr | tr | xhtml:td | td | xhtml:th | th) &lt; 2 and not(parent::*[local-name() = 'tr'] and ancestor::*[2][local-name() = 'repeat' and namespace-uri() = 'http://www.w3.org/2002/xforms']) and ((not(following-sibling::*) and not(preceding-sibling::*)) or not(xhtml:tr | tr | xhtml:td | td | xhtml:th | th))]">
							<xsl:choose>
								<xsl:when test="@id">"<xsl:value-of select="@id"/>",0</xsl:when>
								<xsl:otherwise>
									<xsl:value-of select="$jsid_pf"/>
									<xsl:text>repeat-</xsl:text>
									<xsl:value-of select="$workid"/>
									<xsl:text>",0</xsl:text>
								</xsl:otherwise>
							</xsl:choose>
						</xsl:when>
						<xsl:otherwise>
							<xsl:value-of select="$jsid_pf"/>
							<xsl:for-each select="node()">
								<xsl:if test="self::* and not(preceding-sibling::*)">
									<xsl:value-of select="local-name()"/>
									<xsl:text>-</xsl:text>
									<xsl:value-of select="concat(position(),'_',$workid)"/>
									<xsl:text>",</xsl:text>
								</xsl:if>
							</xsl:for-each>
							<xsl:value-of select="count(*)"/>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:variable>
				<xsl:value-of select="$repeatid"/>
				<xsl:text>,</xsl:text>
				<xsl:call-template name="toScriptBinding"><xsl:with-param name="p" select="$nodeset"/></xsl:call-template>
				<xsl:text>);</xsl:text>
			</js>
			<xsl:apply-templates select="node()" mode="script">
				<xsl:with-param name="parentworkid" select="$workid"/>
			</xsl:apply-templates>
			<xsl:call-template name="listeners">
				<xsl:with-param name="workid" select="$workid"/>
			</xsl:call-template>
		</xsl:template>
	</cm:source>
</cm:component>