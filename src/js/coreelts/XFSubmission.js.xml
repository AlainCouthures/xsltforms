<cm:component xmlns:cm="http://www.agencexml.com/cm" name="XFSubmission.js">
	<cm:author>Alain Couthures</cm:author>
	<cm:creationdate>2009-04-07</cm:creationdate>
	<cm:lastupdate>2015-04-23</cm:lastupdate>
	<cm:licence>
Copyright (C) 2008-2015 &lt;agenceXML&gt; - Alain COUTHURES
Contact at : &lt;info@agencexml.com&gt;

Copyright (C) 2006 AJAXForms S.L.
Contact at: &lt;info@ajaxforms.com&gt;

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
	</cm:licence>
	<cm:source type="text/javascript">
		<cm:wiki>
=== "XsltForms_submission" class ===
Submission Class
* constructor function : store the properties of this submission and attaches it to a model</cm:wiki>
		<![CDATA[
function XsltForms_submission(subform, id, model, ref, value, bind, action, method, version, indent,
			mediatype, encoding, omitXmlDeclaration, cdataSectionElements,
			replace, targetref, instance, separator, includenamespaceprefixes, validate, relevant,
			synchr, show, serialization) {
	if (document.getElementById(id)) {
		return;
	}
	this.init(subform, id, model, "xforms-submission");
	this.model = model;
	if (!model.defaultSubmission) {
		model.defaultSubmission = this;
	}
	this.action = action;
	if (action.substr && (action.substr(0, 7) === "file://" || (window.location.href.substr(0, 7) === "file://" && action.substr(0, 7) !== "http://")) && !(document.applets.xsltforms || document.getElementById("xsltforms_applet")) ) {
		XsltForms_browser.loadapplet();
	}
	this.method = method;
	this.replace = replace;
	this.targetref = targetref;
	this.version = version;
	this.indent = indent;
	this.validate = validate;
	this.relevant = relevant;
	this.synchr = synchr;
	this.show = show;
	this.serialization = serialization;
	if (mediatype) {
		var lines = mediatype.split(";");
		this.mediatype = lines[0];
		for (var i = 1, len = lines.length; i < len; i++) {
			var vals = lines[i].split("=");
			switch (vals[0].replace(/^\s+/g,'').replace(/\s+$/g,'')) {
				case "action":
					this.soapAction = vals[1].replace(/^\s+/g,'').replace(/\s+$/g,'');
					break;
				case "charset":
					this.charset = vals[1].replace(/^\s+/g,'').replace(/\s+$/g,'');
					break;
			}
		}
		if (this.mediatype === "application/zip" || this.mediatype === "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet") {
			this.charset = "x-user-defined-binary";
		}
	}
	this.encoding = encoding || "UTF-8";
	this.omitXmlDeclaration = omitXmlDeclaration;
	this.cdataSectionElements = cdataSectionElements;
	this.instance = instance;
	this.separator = separator === "&amp;"? "&" : separator;
	this.includenamespaceprefixes = includenamespaceprefixes;
	this.headers = [];
	if (ref || bind || value) {
		this.binding = new XsltForms_binding(value ? "xsd:string" : null, value ? value : ref, model.element, bind);
		this.eval_ = function() {
			var res = this.binding.bind_evaluate();
			return typeof res === "string" ? res : res[0];
		};
	} else {
		this.eval_ = function() {
			return this.model.getInstanceDocument();
		};
	}
	this.pending = false;
}

XsltForms_submission.prototype = new XsltForms_coreElement();

]]>
		<cm:wiki>
* '''header''' method : declares a header</cm:wiki>
<![CDATA[
XsltForms_submission.prototype.header = function(nodeset, combine, name, values) {
	this.headers.push({nodeset: nodeset, combine: combine, name: name, values: values});
	return this;
};
]]>
		<cm:wiki>
* '''xml2data''' method : prepares XML data for submission according to HTTP method</cm:wiki>
<![CDATA[
XsltForms_submission.prototype.xml2data = function(node, method) {
	if (this.mediatype === "application/zip" ||
	    this.mediatype === "application/vnd.openxmlformats-officedocument.wordprocessingml.document" ||
		this.mediatype === "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet") {
		var instance = document.getElementById(XsltForms_browser.getDocMeta(node.nodeType === Fleur.Node.DOCUMENT_NODE ? node : node.ownerDocument, "instance")).xfElement;
		if (!instance.archive) {
			alert("Not an archive!");
		}
		return XsltForms_browser.xml2zip(instance.archive, this.mediatype);
	}
	var ser = node ? typeof node === "string" ? node : method === "urlencoded-post" ? XsltForms_submission.toUrl_(node, this.separator) : XsltForms_browser.saveNode(node, "application/xml", this.relevant, false, method === "multipart-post", this.cdataSectionElements) : "";
	if (this.mediatype === "text/csv" && typeof node !== "string") { 
		return XsltForms_browser.xml2csv(ser, this.separator);
	}
	if ((this.mediatype === "application/json" || this.mediatype === "text/json") && typeof node !== "string") {
		return XsltForms_browser.xml2json(ser);
	}
	return ser;
};
]]>
		<cm:wiki>
* '''submit''' method : submits serialized data according to choosen method</cm:wiki>
<![CDATA[
XsltForms_submission.prototype.submit = function() {
	if (this.pending) {
		XsltForms_globals.openAction("XsltForms_submission.prototype.submit");
		this.issueSubmitException_({"error-type": "submission-in-progress"});
		XsltForms_globals.closeAction("XsltForms_submission.prototype.submit");
		return;
	}
	this.pending = true;
	var ctxnode, targetnode, inst, body, scriptelt;
	XsltForms_globals.openAction("XsltForms_submission.prototype.submit");
	var node = this.eval_();
	var action = "error";
	if(this.action.bind_evaluate) {
		action = XsltForms_globals.stringValue(this.action.bind_evaluate(this.subform));
	} else {
		action = this.action;
	}
	var method = "post";
	var subm = this;
	if(this.method.bind_evaluate) {
		method = XsltForms_globals.stringValue(this.method.bind_evaluate(this.subform));
	} else {
		method = this.method;
	}
	var evcontext = {"method": method, "resource-uri": action};
	if (action.subst && action.subst(0, 8) === "local://" && (typeof(localStorage) === 'undefined')) {
		evcontext["error-type"] = "validation-error";
		this.issueSubmitException_(evcontext, null, {message: "local:// submission not supported"});
		XsltForms_globals.closeAction("XsltForms_submission.prototype.submit");
		this.pending = false;
		return;
	}
	if (node) {
		if (this.validate && !XsltForms_globals.validate_(node)) {
			XsltForms_globals.validationError = true;
			XsltForms_globals.addChange(subm.model);
			XsltForms_xmlevents.dispatch(subm.model, "xforms-rebuild");
			XsltForms_globals.refresh();
			evcontext["error-type"] = "validation-error";
			this.issueSubmitException_(evcontext, null, null);
			XsltForms_globals.closeAction("XsltForms_submission.prototype.submit");
			this.pending = false;
			return;
		}
		if ((method === "get" || method === "delete") && this.serialization !== "none" && action.substr(0, 9) !== "opener://" && action.substr(0, 8) !== "local://" && action.substr(0, 11) !== "javascript:") {
			var tourl = XsltForms_submission.toUrl_(node, this.separator);
			if (tourl.length > 0) {
				action += (action.indexOf('?') === -1? '?' : this.separator) + tourl.substr(0, tourl.length - this.separator.length);
			}
		}
	}
	var ser = "";
	if (this.serialization !== "none") {
		XsltForms_xmlevents.dispatch(this, "xforms-submit-serialize");
		ser = this.xml2data(node, method);
	}
	var instance = this.instance;
	if ((window.location.href.substr(0, 7) === "file://" && action.substr(0, 7) !== "http://" && method !== "get") || (action.substr(0, 7) === "file://" && (window.location.href.substr(0, 7) !== "file://" || method !== "get")) || action.substr(0, 9) === "opener://" || action.substr(0, 8) === "local://") {
		if ((window.location.href.substr(0, 7) === "file://" || action.substr(0, 7) === "file://") && method === "put") {
			if (!XsltForms_browser.writeFile(window.location.href.substr(0, 7) === "file://" ? action : action.substr(7), subm.encoding, "string", "XSLTForms Java Saver", ser)) {
				XsltForms_xmlevents.dispatch(subm, "xforms-submit-error");
			}
			XsltForms_xmlevents.dispatch(subm, "xforms-submit-done");
		} else if (window.location.href.substr(0, 7) === "file://" && method === "get") {
			scriptelt = XsltForms_browser.isXhtml ? document.createElementNS("http://www.w3.org/1999/xhtml", "script") : document.createElement("script");
			scriptelt.setAttribute("src", action);
			scriptelt.setAttribute("id", "xsltforms-filereader");
			scriptelt.setAttribute("type", "application/xml");
			var scriptLoaded = function() {
				alert(document.getElementById("xsltforms-filereader").textContent);
			};
			scriptelt.onreadystatechange = function () {
				if (this.readyState === 'complete' || this.readyState === 'loaded') {
					scriptLoaded();
				}
			};
			scriptelt.onload = scriptLoaded;
			body = XsltForms_browser.isXhtml ? document.getElementsByTagNameNS("http://www.w3.org/1999/xhtml", "body")[0] : document.getElementsByTagName("body")[0];
			body.insertBefore(scriptelt, body.firstChild);
		} else if (action.substr(0, 9) === "opener://" && method === "put") {
			try {
				window.opener.XsltForms_globals.xmlrequest('put', action.substr(9), ser);
			} catch (e) {
				XsltForms_xmlevents.dispatch(subm, "xforms-submit-error");
				XsltForms_globals.closeAction("XsltForms_submission.prototype.submit");
				this.pending = false;
				return;
			}
			XsltForms_xmlevents.dispatch(subm, "xforms-submit-done");
		} else if (action.substr(0, 8) === "local://" && method === "put") {
			try {
				window.localStorage.setItem(action.substr(8), ser);
			} catch (e) {
				XsltForms_xmlevents.dispatch(subm, "xforms-submit-error");
				XsltForms_globals.closeAction("XsltForms_submission.prototype.submit");
				this.pending = false;
				return;
			}
			XsltForms_xmlevents.dispatch(subm, "xforms-submit-done");
		} else if (action.substr(0, 8) === "local://" && method === "delete") {
			try {
				window.localStorage.removeItem(action.substr(8));
			} catch (e) {
				XsltForms_xmlevents.dispatch(subm, "xforms-submit-error");
				XsltForms_globals.closeAction("XsltForms_submission.prototype.submit");
				this.pending = false;
				return;
			}
			XsltForms_xmlevents.dispatch(subm, "xforms-submit-done");
		} else if (method === "get") {
			if (action.substr(0, 7) === "file://") {
				ser =  XsltForms_browser.readFile(action.substr(7), subm.encoding, "string", "XSLTForms Java Loader");
			} else if (action.substr(0, 8) === "local://") {
				try {
					ser = window.localStorage.getItem(action.substr(8));
				} catch (e) {
					XsltForms_xmlevents.dispatch(subm, "xforms-submit-error");
					XsltForms_globals.closeAction("XsltForms_submission.prototype.submit");
					this.pending = false;
					return;
				} 
			} else if (action.substr(0, 9) === "opener://") {
				try {
					ser = window.opener.XsltForms_globals.xmlrequest('get', action.substr(9));
				} catch (e) {
					XsltForms_xmlevents.dispatch(subm, "xforms-submit-error");
					XsltForms_globals.closeAction("XsltForms_submission.prototype.submit");
					this.pending = false;
					return;
				} 
			} else {
				eval("ser = (" + action.substr(11) + ");");
			}
			if (ser !== "" && (subm.replace === "instance" || (subm.targetref && subm.replace === "text"))) {
				ctxnode = !instance ? (node ? (node.documentElement ? node.documentElement : node.ownerDocument.documentElement) : subm.model.getInstance().documentElement) : document.getElementById(instance).xfElement.doc.documentElement;
				if (subm.targetref) {
					targetnode = subm.targetref.bind_evaluate(subm.subform, ctxnode);
					if (targetnode && targetnode[0]) {
						if (subm.replace === "instance") {
							XsltForms_browser.loadNode(targetnode[0], ser, "application/xml");
						} else {
							XsltForms_browser.loadTextNode(targetnode[0], ser);
						}
					}
				} else {
					inst = !instance ? (node ? document.getElementById(XsltForms_browser.getDocMeta(node.nodeType === Fleur.Node.DOCUMENT_NODE ? node : node.ownerDocument, "instance")).xfElement : subm.model.getInstance()) : document.getElementById(instance).xfElement;
					inst.setDoc(ser, false, true);
				}
				XsltForms_globals.addChange(subm.model);
				XsltForms_xmlevents.dispatch(subm.model, "xforms-rebuild");
				XsltForms_globals.refresh();
				XsltForms_xmlevents.dispatch(subm, "xforms-submit-done");
			} else {
				XsltForms_xmlevents.dispatch(subm, "xforms-submit-error");
			}
		}
		XsltForms_globals.closeAction("XsltForms_submission.prototype.submit");
		this.pending = false;
		return;
	}
	if (action.substr(0,11) === "javascript:") {
		if (method === "get") {
			eval("ser = (" + action.substr(11) + ");");
			if (ser !== "" && (subm.replace === "instance" || (subm.targetref && subm.replace === "text"))) {
				ctxnode = !instance ? (node ? (node.documentElement ? node.documentElement : node.ownerDocument.documentElement) : subm.model.getInstance().documentElement) : document.getElementById(instance).xfElement.doc.documentElement;
				if (subm.targetref) {
					targetnode = subm.targetref.bind_evaluate(subm.subform, ctxnode);
					if (targetnode && targetnode[0]) {
						if (subm.replace === "instance") {
							XsltForms_browser.loadNode(targetnode[0], ser, "application/xml");
						} else {
							XsltForms_browser.loadTextNode(targetnode[0], ser);
						}
					}
				} else {
					inst = !instance ? (node ? document.getElementById(XsltForms_browser.getDocMeta(node.nodeType === Fleur.Node.DOCUMENT_NODE ? node : node.ownerDocument, "instance")).xfElement : subm.model.getInstance()) : document.getElementById(instance).xfElement;
					inst.setDoc(ser, false, true);
				}
				XsltForms_globals.addChange(subm.model);
				XsltForms_xmlevents.dispatch(subm.model, "xforms-rebuild");
				XsltForms_globals.refresh();
				XsltForms_xmlevents.dispatch(subm, "xforms-submit-done");
			} else {
				XsltForms_xmlevents.dispatch(subm, "xforms-submit-error");
			}
		}
		XsltForms_globals.closeAction("XsltForms_submission.prototype.submit");
		this.pending = false;
		return;
	}
	var synchr = this.synchr;
	if (synchr) {
		XsltForms_browser.dialog.show("statusPanel", null, false);
	}
	if(method === "xml-urlencoded-post") {
		var outForm = document.getElementById("xsltforms_form");
		if(outForm) {
			outForm.firstChild.value = ser;
		} else {
			outForm = XsltForms_browser.isXhtml ? document.createElementNS("http://www.w3.org/1999/xhtml", "form") : document.createElement("form");
			outForm.setAttribute("method", "post");
			outForm.setAttribute("action", action);
			outForm.setAttribute("id", "xsltforms_form");
			var txt = XsltForms_browser.isXhtml ? document.createElementNS("http://www.w3.org/1999/xhtml", "input") : document.createElement("input");
			txt.setAttribute("type", "hidden");
			txt.setAttribute("name", "postdata");
			txt.setAttribute("value", ser);
			outForm.appendChild(txt);
			body = XsltForms_browser.isXhtml ? document.getElementsByTagNameNS("http://www.w3.org/1999/xhtml", "body")[0] : document.getElementsByTagName("body")[0];
			body.insertBefore(outForm, body.firstChild);
		}
		outForm.submit();
		XsltForms_globals.closeAction("XsltForms_submission.prototype.submit");
	} else {
		/*
		var cross = false;
		if (action.match(/^[a-zA-Z0-9+\.\-]+:\/\//)) {
			var domain = /^([a-zA-Z0-9+\.\-]+:\/\/[^\/]*)/;
			var sdom = domain.exec(action);
			var ldom = domain.exec(document.location.href);
			cross = sdom[0] !== ldom[0];
		}
		*/
		if (this.mediatype === "text/jsonp") {
			XsltForms_browser.jsoninstobj = {instance: !instance ? (node ? document.getElementById(XsltForms_browser.getDocMeta(node.nodeType === Fleur.Node.DOCUMENT_NODE ? node : node.ownerDocument, "instance")).xfElement : this.model.getInstance()) : document.getElementById(instance).xfElement, submission: this};
			scriptelt = XsltForms_browser.isXhtml ? document.createElementNS("http://www.w3.org/1999/xhtml", "script") : document.createElement("script");
			scriptelt.setAttribute("src", action.replace(/&amp;/g, "&")+((action.indexOf("?") === -1) ? "?" : "&")+"callback=jsoninst");
			scriptelt.setAttribute("id", "jsoninst");
			scriptelt.setAttribute("type", "text/javascript");
			body = XsltForms_browser.isXhtml ? document.getElementsByTagNameNS("http://www.w3.org/1999/xhtml", "body")[0] : document.getElementsByTagName("body")[0];
			body.insertBefore(scriptelt, body.firstChild);
			XsltForms_xmlevents.dispatch(this, "xforms-submit-done");
			XsltForms_globals.closeAction("XsltForms_submission.prototype.submit");
		} else {
			// TODO: Validate binding target is not empty
			if (!node && (method !== "get" || method !== "delete")) {
				evcontext["error-type"] = "no-data";
				this.issueSubmitException_(evcontext, null, null);
				this.pending = false;
				return;
			}
			var req = null;
			try {
				evcontext["resource-uri"] = action;
				req = XsltForms_browser.openRequest(method.split("-").pop(), action, !synchr);
				var func = function() {
					if (!synchr && req.readyState !== 4) {
						return;
					}
					try {
						if (req.status === 1223) {
							req.status = 204;
							req.statusText = "No Content";
						}
						if (req.status !== 0 && (req.status < 200 || req.status >= 300)) {
							evcontext["error-type"] = "resource-error";
							subm.issueSubmitException_(evcontext, req, null);
							XsltForms_globals.closeAction("XsltForms_submission.prototype.submit");
							subm.pending = false;
							return;
						}
						if (subm.replace === "instance" || (subm.targetref && subm.replace === "text")) {
							if (subm.targetref) {
								ctxnode = !instance ? (node ? (node.nodeType === Fleur.Node.DOCUMENT_NODE ? node.documentElement : node.ownerDocument.documentElement) : subm.model.getInstance().documentElement) : document.getElementById(instance).xfElement.doc.documentElement;
								targetnode = subm.targetref.bind_evaluate(subm.subform, ctxnode);
								if (targetnode && targetnode[0]) {
									if (subm.replace === "instance") {
										XsltForms_browser.loadNode(targetnode[0], req.responseText, "application/xml");
									} else {
										XsltForms_browser.loadTextNode(targetnode[0], req.responseText);
									}
								}
							} else {
								inst = !instance ? (node ? document.getElementById(XsltForms_browser.getDocMeta(node.nodeType === Fleur.Node.DOCUMENT_NODE ? node : node.ownerDocument, "instance")).xfElement : subm.model.getInstance()) : document.getElementById(instance).xfElement;
								inst.setDocFromReq(req, false, true);
							}
							XsltForms_globals.addChange(subm.model);
							XsltForms_xmlevents.dispatch(subm.model, "xforms-rebuild");
							XsltForms_globals.refresh();
						}
						XsltForms_submission.requesteventlog(evcontext, req);
						XsltForms_xmlevents.dispatch(subm, "xforms-submit-done", null, null, null, null, evcontext);
						XsltForms_globals.closeAction("XsltForms_submission.prototype.submit");
						if (subm.replace === "all") {
							var resp = req.responseText;
							var piindex = resp.indexOf("<?xml-stylesheet", 0);
							while ( piindex !== -1) {
								var xslhref = resp.substr(piindex, resp.substr(piindex).indexOf("?>")).replace(/^.*href=\"([^\"]*)\".*$/, "$1");
								resp = XsltForms_browser.transformText(resp, xslhref, false);
								piindex = resp.indexOf("<?xml-stylesheet", 0);
							}
							if( subm.show === "new" ) {
								if (req.getResponseHeader("Content-Type") === "application/octet-stream;base64") {
									//window.open("data:application/octet-stream;base64," + resp,"_blank");
									location.href ="data:application/octet-stream;base64," + resp;
								} else {
									var w = window.open("about:blank","_blank");
									w.document.write(resp);
									w.document.close();
								}
							} else {
								XsltForms_browser.dialog.hide("statusPanel", false);
								XsltForms_globals.close();
								if(document.write) {
									document.write(resp);
									document.close();
								} else {
									//document.documentElement.parentNode.replaceChild(req.responseXML.documentElement,document.documentElement);
									if (resp.indexOf("<?", 0) === 0) {
										resp = resp.substr(resp.indexOf("?>")+2);
									}                       
									//alert(resp);
									document.documentElement.innerHTML = resp;
								}
							}
						}
					} catch(e) {
						XsltForms_browser.debugConsole.write(e || e.message);
						evcontext["error-type"] = "parse-error";
						subm.issueSubmitException_(evcontext, req, e);
						XsltForms_globals.closeAction("XsltForms_submission.prototype.submit");
					}
					subm.pending = false;
				};
				if (!synchr) {
					req.onreadystatechange = func;
				}
				var media = this.mediatype;
				var mt;
				if (method === "multipart-post") {
					mt = "multipart/related; boundary=xsltformsrev" + XsltForms_globals.fileVersionNumber + '; type="application/xml"; start="<xsltforms_main>"';
				} else {
					mt = (media || "application/xml") + (this.charset? ";charset=" + this.charset : "");
				}
				XsltForms_browser.debugConsole.write("Submit " + this.method + " - " + mt + " - " + action + " - " + synchr);
				var len = this.headers.length;
				var acceptValue = "";
				if (len !== 0) {
					var headers = [];
					for (var i = 0, len0 = this.headers.length; i < len0; i++) {
						var nodes = [];
						if (this.headers[i].nodeset) {
							nodes = this.headers[i].nodeset.bind_evaluate(this.subform);
						} else {
							nodes = [subm.model.getInstanceDocument().documentElement];
						}
						var hname;
						for (var n = 0, lenn = nodes.length; n < lenn; n++) {
							if (this.headers[i].name.bind_evaluate) {
								hname = XsltForms_globals.stringValue(this.headers[i].name.bind_evaluate(nodes[n]));
							} else {
								hname = this.headers[i].name;
							}
							if (hname !== "") {
								var hvalue = "";
								var j;
								var len2;
								for (j = 0, len2 = this.headers[i].values.length; j < len2; j++) {
									var hv = this.headers[i].values[j];
									var hv2;
									if (hv.bind_evaluate) {
										hv2 = XsltForms_globals.stringValue(hv.bind_evaluate(nodes[n]));
									} else {
										hv2 = hv;
									}
									hvalue += hv2;
									if (j < len2 - 1) {
										hvalue += ",";
									}
								}
								var len3;
								for (j = 0, len3 = headers.length; j < len3; j++) {
									if (headers[j].name === hname) {
										switch (this.headers[i].combine) {
											case "prepend":
												headers[j].value = hvalue + "," + headers[j].value;
												break;
											case "replace":
												headers[j].value = hvalue;
												break;
											default:
												headers[j].value += "," + hvalue;
												break;
										}
										break;
									}
								}
								if (j === len3) {
									headers.push({name: hname, value: hvalue});
								}
							}
						}
					}
					for (var k = 0, len4 = headers.length; k < len4; k++) {
						req.setRequestHeader(headers[k].name, headers[k].value);
						if (headers[k].name.toLowerCase() === "accept") {
							acceptValue = headers[k].value;
						}
					}
				}
				if (method === "get" || method === "delete") {
					if (acceptValue === "") {
						if (media === XsltForms_submission.SOAP_) {
							req.setRequestHeader("Accept", mt);
							acceptValue = mt;
						} else {
							if (subm.replace === "instance") {
								req.setRequestHeader("Accept", "application/xml,text/xml");
								acceptValue = "application/xml,text/xml";
							} else {
								req.setRequestHeader("Accept", "text/plain");
								acceptValue = "text/plain";
							}
						}
					}
					if (req.overrideMimeType) {
						req.overrideMimeType(acceptValue.split(",")[0].split(";")[0]);
						/*
						if (subm.mediatype === "application/zip" || subm.mediatype === "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" ) {
							req.overrideMimeType('text/plain; charset=x-user-defined');
						} else if (subm.mediatype && subm.mediatype.indexOf("/xml") === -1 && subm.mediatype.indexOf("+xml") === -1) {
							req.overrideMimeType(subm.mediatype + '; charset=ISO-8859-1');
						}
						*/
					}
					//req.setRequestHeader("If-Modified-Since", "Sat, 1 Jan 2005 00:00:00 GMT");
					req.send(null);
				} else {
					if (method === "urlencoded-post") {
						mt = "application/x-www-form-urlencoded";
					}
					req.setRequestHeader("Content-Type", mt);
					if (media === XsltForms_submission.SOAP_) {
						req.setRequestHeader("SOAPAction", this.soapAction);
					} else {
						if (subm.replace === "instance") {
							req.setRequestHeader("Accept", "application/xml,text/xml");
						}
					}
					req.send(ser);
				}
				if (synchr) {
					func();
					XsltForms_browser.dialog.hide("statusPanel", null, false);
				}
			} catch(e) {
				XsltForms_browser.dialog.hide("statusPanel", null, false);
				XsltForms_browser.debugConsole.write(e.message || e);
				evcontext["error-type"] = "resource-error";
				subm.issueSubmitException_(evcontext, req, e);
				XsltForms_globals.closeAction("XsltForms_submission.prototype.submit");
				subm.pending = false;
			}
		}
	}
};

XsltForms_submission.SOAP_ = "application/soap+xml";

]]>
		<cm:wiki>
* '''requesteventlog''' method : Prepares the event-context for a request.</cm:wiki>
<![CDATA[
XsltForms_submission.requesteventlog = function(evcontext, req) {
	try {
		evcontext["response-status-code"] = req.status;
		evcontext["response-reason-phrase"] = req.statusText;
		evcontext["response-headers"] = [];
		var rheads = req.getAllResponseHeaders();
		var rheaderselts = "";
		if (rheads) {
			rheads = rheads.replace(/\r/, "").split("\n");
			for (var i = 0, len = rheads.length; i < len; i++) {
				var colon = rheads[i].indexOf(":");
				if (colon !== -1) {
					var name = rheads[i].substring(0, colon).replace(/^\s+|\s+$/, "");
					var value = rheads[i].substring(colon+1).replace(/^\s+|\s+$/, "");
					rheaderselts += "<header><name>"+XsltForms_browser.escape(name)+"</name><value>"+XsltForms_browser.escape(value)+"</value></header>";
				}
			}
		}
		evcontext.rheadsdoc = XsltForms_browser.createXMLDocument("<data>"+rheaderselts+"</data>");
		if (evcontext.rheadsdoc.documentElement.firstChild) {
			var rh = evcontext.rheadsdoc.documentElement.firstChild;
			evcontext["response-headers"] = [rh];
			while (rh.nextSibling) {
				rh = rh.nextSibling;
				evcontext["response-headers"].push(rh);
			}
		}
		if (req.responseXML) {
			evcontext["response-body"] = [XsltForms_browser.createXMLDocument(req.responseText).documentElement];
		} else {
			evcontext["response-body"] = req.responseText || "";
		}
	} catch (e) {
	}
};
]]>
		<cm:wiki>
* '''issueSubmitException_''' method : Prepares the event-context and issues a 'xforms-submit-error' event.</cm:wiki>
<![CDATA[
XsltForms_submission.prototype.issueSubmitException_ = function(evcontext, req, ex) {
	if (ex) {
		evcontext.message = ex.message || ex;
		evcontext["stack-trace"] = ex.stack;
	}
	if (req) {
		XsltForms_submission.requesteventlog(evcontext, req);
	}
	XsltForms_xmlevents.dispatch(this, "xforms-submit-error", null, null, null, null, evcontext);
};
]]>
		<cm:wiki>
* '''toUrl_''' method : recursively collects node values to add them to an URL</cm:wiki>
<![CDATA[
XsltForms_submission.toUrl_ = function(node, separator) {
	var url = "";
	var val = "";
	var hasChilds = false;
	for(var i = 0, len = node.childNodes.length; i < len; i++) {
		var child = node.childNodes[i];
		switch (child.nodeType) {
			case Fleur.Node.ELEMENT_NODE:
				hasChilds = true;
				url += this.toUrl_(child, separator);
				break;
			case Fleur.Node.TEXT_NODE:
				val += child.nodeValue;
				break;
		}
	}
	if (!hasChilds && val.length > 0) {
		url += node.nodeName + '=' + encodeURIComponent(val) + separator;
	}
	return url;
};
]]>
	</cm:source>
</cm:component>
