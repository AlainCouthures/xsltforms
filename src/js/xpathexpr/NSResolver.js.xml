<cm:component xmlns:cm="http://www.agencexml.com/cm" name="NSResolver.js">
	<cm:author>Alain Couthures</cm:author>
	<cm:creationdate>2009-04-07</cm:creationdate>
	<cm:lastupdate>2009-04-07</cm:lastupdate>
	<cm:licence>
Copyright (C) 2008-2010 &lt;agenceXML&gt; - Alain COUTHURES
Contact at : &lt;info@agencexml.com&gt;

Copyright (C) 2006 AJAXForms S.L.
Contact at: &lt;info@ajaxforms.com&gt;

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
	</cm:licence>
	<cm:source type="text/javascript">
		<cm:wiki>
=== XsltForms_nSResolver Class ===
XPath Expression Class for namespace resolving
* constructor function : initializes map property as an empty associative array</cm:wiki>
		<![CDATA[
function XsltForms_nsResolver() {
	this.map = {};
	this.notfound = false;
}

]]>
		<cm:wiki>
* '''registerAll''' method : registers all the namespaces from a given resolver in this Namespace Resolver object</cm:wiki>
<![CDATA[
XsltForms_nsResolver.prototype.registerAll = function(resolver) {
	for (var prefix in resolver.map) {
		if (resolver.map.hasOwnProperty(prefix)) {
			this.map[prefix] = resolver.map[prefix];
		}
	}
};

]]>
		<cm:wiki>
* '''register''' method : registers a prefix and an uri in this Namespace Resolver object</cm:wiki>
<![CDATA[
XsltForms_nsResolver.prototype.register = function(prefix, uri) {
	this.map[prefix] = uri;
	if( uri === "notfound" ) {
		this.notfound = true;
	}
};

]]>
		<cm:wiki>
* '''registerNotFound''' method : registers a prefix for a not found uri in this Namespace Resolver object</cm:wiki>
<![CDATA[
XsltForms_nsResolver.prototype.registerNotFound = function(prefix, uri) {
	if( this.map[prefix] === "notfound" ) {
		this.map[prefix] = uri;
		for (var p in this.map) {
			if (this.map.hasOwnProperty(p)) {
				if (this.map[p] === "notfound") {
					this.notfound = true;
				}
			}
		}
	}
};

]]>
		<cm:wiki>
* '''lookupNamespaceURI''' method : looks up for the corresponding uri for a given prefix in this Namespace Resolver object</cm:wiki>
<![CDATA[
XsltForms_nsResolver.prototype.lookupNamespaceURI = function(prefix) {
	return this.map[prefix];
};
]]>
	</cm:source>
</cm:component>