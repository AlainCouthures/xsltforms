<cm:component xmlns:cm="http://www.agencexml.com/cm" name="XFUpload.js">
	<cm:author>Alain Couthures</cm:author>
	<cm:creationdate>2012-03-29</cm:creationdate>
	<cm:lastupdate>2015-04-23</cm:lastupdate>
	<cm:licence>
Copyright (C) 2008-2015 &lt;agenceXML&gt; - Alain COUTHURES
Contact at : &lt;info@agencexml.com&gt;

Copyright (C) 2006 AJAXForms S.L.
Contact at: &lt;info@ajaxforms.com&gt;

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
	</cm:licence>
	<cm:source type="text/javascript">
		<cm:wiki>
=== "XsltForms_upload" class ===
Upload Control  Class
* constructor function : initializes specific properties including aid button management</cm:wiki>
		<![CDATA[
function XsltForms_upload(subform, id, valoff, binding, incremental, filename, mediatype, aidButton, clone) {
	XsltForms_globals.counters.upload++;
	this.init(subform, id);
	this.controlName = "upload";
	this.binding = binding;
	this.incremental = incremental;
	this.filename = filename;
	var cells = this.element.children;
	this.valoff = valoff;
	this.cell = cells[valoff];
	this.input = this.cell.children[0];
	//if (this.input.nodeName.toLowerCase() === "form") {
	//	this.input = this.input.children[0];
	//}
	this.isClone = clone;
	this.hasBinding = true;
	this.bolAidButton = aidButton;
	this.mediatype = mediatype;
	this.value = "";
	this.headers = [];
	this.initFocus(this.input, true);
	if (!window.FileReader && !(document.applets.xsltforms || document.getElementById("xsltforms_applet"))) {
		XsltForms_browser.loadapplet();
	}
	if (aidButton) {
		this.aidButton = cells[valoff + 1].children[0];
		this.initFocus(this.aidButton);
	}
}

XsltForms_upload.prototype = new XsltForms_control();

XsltForms_upload.contents = {};

]]>
		<cm:wiki>
* '''resource''' method : declares the resource</cm:wiki>
<![CDATA[
XsltForms_upload.prototype.resource = function(resource) {
	this.resource = resource;
	return this;
};
]]>
		<cm:wiki>
* '''header''' method : declares a header</cm:wiki>
<![CDATA[
XsltForms_upload.prototype.header = function(nodeset, combine, name, values) {
	this.headers.push({nodeset: nodeset, combine: combine, name: name, values: values});
	return this;
};
]]>
		<cm:wiki>
* '''clone''' method : creates a new upload with the given id</cm:wiki>
<![CDATA[
XsltForms_upload.prototype.clone = function(id) { 
	return new XsltForms_upload(this.subform, id, this.valoff, this.binding, this.incremental, this.filename, this.mediatype, this.bolAidButton, true);
};

]]>
		<cm:wiki>
* '''dispose''' method : clears properties of this element and calls the parent dispose() method</cm:wiki>
<![CDATA[
XsltForms_upload.prototype.dispose = function() {
	this.cell = null;
	XsltForms_globals.counters.upload--;
	XsltForms_control.prototype.dispose.call(this);
};

]]>
		<cm:wiki>
* '''setValue''' method : sets the value of this input control according to its type</cm:wiki>
<![CDATA[
XsltForms_upload.prototype.setValue = function(value) {
	var node = this.element.node;
	this.type = node ? XsltForms_schema.getType(XsltForms_browser.getType(node) || "xsd_:string") : XsltForms_schema.getType("xsd_:string");
	if (this.value !== value) {
		this.value = value || "";
		if (this.input.parentElement.nodeName.toLowerCase() === "form") {
			this.input.form.reset();
		}
	}
	if (this.resource && typeof plupload !== "undefined") {
		if (!this.uploader) {
			var upsettings = {};
			eval("upsettings = " + (this.type.appinfo ? this.type.appinfo.replace(/(\r\n|\n|\r)/gm, " ") : "{}"));
			upsettings.url = "dummy";
			upsettings.init = {
				PostInit: function() {
					var uploadctl = XsltForms_control.getXFElement(this.getOption("browse_button")[0]);
					if (uploadctl.uploadbtn) {
						uploadctl.uploadbtn.disabled = true;
						uploadctl.uploadbtn.onclick = function() {
							var uploadctl = XsltForms_control.getXFElement(this);
							uploadctl.uploader.start();
							return false;
						};
					}
				},
				FileFiltered: function(up, file) {
					var uploadctl = XsltForms_control.getXFElement(up.getOption("browse_button")[0]);
					if ((" " + uploadctl.value + " ").indexOf(" " + file.name + " ") === -1) {
						if (uploadctl.value !== "") {
							uploadctl.value = uploadctl.value + " " + file.name;
						} else {
							uploadctl.value = file.name;
						}
						if (uploadctl.incremental) {
							uploadctl.valueChanged(uploadctl.value);
						}
					}
					if (uploadctl.uploadbtn) {
						uploadctl.uploadbtn.disabled = false;
					}
				},
				BeforeUpload: function(up, file) {
					var uploadctl = XsltForms_control.getXFElement(up.getOption("browse_button")[0]);
					var resource;
					if (uploadctl.resource.bind_evaluate) {
						resource = XsltForms_globals.stringValue(uploadctl.resource.bind_evaluate(uploadctl.subform, uploadctl.boundnodes[0]));
					} else {
						resource = uploadctl.resource;
					}
					up.setOption("url", resource);
					var len = uploadctl.headers.length;
					if (len !== 0) {
						var upheaders = {};
						for (var i = 0, len0 = uploadctl.headers.length; i < len0; i++) {
							var nodes = [];
							if (uploadctl.headers[i].nodeset) {
								nodes = uploadctl.headers[i].nodeset.bind_evaluate(uploadctl.subform, uploadctl.boundnodes[0]);
							} else {
								nodes = uploadctl.boundnodes;
							}
							var hname;
							for (var n = 0, lenn = nodes.length; n < lenn; n++) {
								if (uploadctl.headers[i].name.bind_evaluate) {
									hname = XsltForms_globals.stringValue(uploadctl.headers[i].name.bind_evaluate(uploadctl.subform, nodes[n]));
								} else {
									hname = uploadctl.headers[i].name;
								}
								if (hname !== "") {
									var hvalue = "";
									var j;
									var len2;
									for (j = 0, len2 = uploadctl.headers[i].values.length; j < len2; j++) {
										var hv = uploadctl.headers[i].values[j];
										var hv2;
										if (hv.bind_evaluate) {
											hv2 = XsltForms_globals.stringValue(hv.bind_evaluate(uploadctl.subform, nodes[n]));
										} else {
											hv2 = hv;
										}
										hvalue += hv2;
										if (j < len2 - 1) {
											hvalue += ",";
										}
									}
									upheaders[hname] = hvalue;
								}
							}
						}
						up.setOption("headers", upheaders);
					}
				},
				UploadComplete: function(up, files) {
					var uploadctl = XsltForms_control.getXFElement(up.getOption("browse_button")[0]);
					if (uploadctl.uploadbtn) {
						uploadctl.uploadbtn.disabled = true;
					}
					if (uploadctl.error) {
						uploadctl.error = null;
					} else {
						XsltForms_xmlevents.dispatch(uploadctl, "xforms-upload-done");
					}
				},
				Error: function(up, err) {
					var evcontext = {
						"method": "POST",
						"resource-uri": up.getOption("url"),
						"error-type": "resource-error",
						"response-body": err.response,
						"response-status-code": err.code,
						"response-reason-phrase": err.message
					};
					var uploadctl = XsltForms_control.getXFElement(up.getOption("browse_button")[0]);
					uploadctl.error = true;
					XsltForms_xmlevents.dispatch(uploadctl, "xforms-upload-error", null, null, null, null, evcontext);
				}
			};
			if (XsltForms_globals.jslibraries["http://www.plupload.com/jquery.ui.plupload"]) {
				var $jQuery = jQuery.noConflict();
				$jQuery(this.element.children[this.valoff].firstChild).plupload(upsettings);
			} else {
				this.uploadbtn = this.element.children[this.valoff].firstChild.children[1];
				upsettings.browse_button = this.element.children[this.valoff].firstChild.firstChild;
				this.uploader = new plupload.Uploader(upsettings);
				this.uploader.init();
			}
		}
	}
};

]]>
		<cm:wiki>
* '''blur''' method : manages the blur event when not in incremental mode</cm:wiki>
<![CDATA[
XsltForms_upload.prototype.blur = function(target) {
	XsltForms_globals.focus = null;
	if (!this.incremental) {
		XsltForms_browser.assert(this.input, this.element.id);
		this.valueChanged(this.value);
	}
};

]]>
		<cm:wiki>
* '''directclick'' method : directly manages the click event</cm:wiki>
<![CDATA[
XsltForms_upload.prototype.directclick = function() {
	if (window.FileReader) {
		return true;
	}
	if (this.type.nsuri !== "http://www.w3.org/2001/XMLSchema" || (this.type.name !== "anyURI" && this.type.name !== "string" && this.type.name !== "base64Binary" && this.type.name !== "hexBinary")) {
		alert("Unexpected type for upload control: " + this.type.nsuri + " " + this.type.name);
		throw "Error";
	} else {
		var filename = "unselected";
		var content = XsltForms_browser.readFile("", "ISO-8859-1", this.type.name, "XSLTForms Java Upload");
		if (document.applets.xsltforms) {
			filename = document.applets.xsltforms.lastChosenFileName;
		} else {
			if( document.getElementById("xsltforms_applet") ) {
				filename = document.getElementById("xsltforms_applet").xsltforms.lastChosenFileName;
			}
		}
		filename = filename.split('\\').pop();
		if (this.type.name === "anyURI") {
			this.value = "file://" + filename + "?id=" + this.element.id;
			XsltForms_upload.contents[this.element.id] = content;
		} else {
			this.value = content;
		}
		this.input.value = filename;
		if (this.incremental) {
			this.valueChanged(this.value);
		}
		if(this.filename && this.filename.bind_evaluate) {
			var filenameref = this.filename.bind_evaluate(this.element.node)[0];
			if (filenameref) {
				XsltForms_globals.openAction("XsltForms_upload.prototype.directclick");
				XsltForms_browser.setValue(filenameref, filename || "");
				var model = document.getElementById(XsltForms_browser.getDocMeta(filenameref.ownerDocument, "model")).xfElement;
				model.addChange(filenameref);
				XsltForms_xmlevents.dispatch(model, "xforms-recalculate");
				XsltForms_globals.refresh();
				XsltForms_globals.closeAction("XsltForms_upload.prototype.directclick");
			}
		}
	}
	return false;
};

]]>
		<cm:wiki>
* '''change'' method : manages the change event</cm:wiki>
<![CDATA[
XsltForms_upload.prototype.change = function() {
	if (this.type.nsuri !== "http://www.w3.org/2001/XMLSchema" || (this.type.name !== "anyURI" && this.type.name !== "string" && this.type.name !== "base64Binary" && this.type.name !== "hexBinary")) {
		alert("Unexpected type for upload control: " + this.type.nsuri + " " + this.type.name);
		throw "Error";
	} else {
		var filename = "unselected";
		var content = "";
		var xf = this;
		try {
			var fr = new FileReader();
			var file = xf.input.files[0];
			if (!file) {
				xf.value = "";
				if (xf.incremental) {
					xf.valueChanged("");
				}
			} else {
				filename = file.name;
				if (xf.type.name === "string") {
					fr.onload = function(e) {
						var bytes = new Uint8Array(e.target.result);
						for( var i = 0, len = bytes.length; i < len; i++) {
							content += String.fromCharCode(bytes[i]);
						}
						xf.value = content;
						if (xf.incremental) {
							xf.valueChanged(content);
						}
					};
				} else if (xf.type.name === "hexBinary") {
					fr.onload = function(e) {
						var bytes = new Uint8Array(e.target.result);
						for( var i = 0, len = bytes.length; i < len; i++) {
							var c = bytes[i] >> 4;
							var d = bytes[i] & 0xF;
							content += String.fromCharCode(c > 9 ? c + 55 : c + 48, d > 9 ? d + 55 : d + 48);
						}
						xf.value = content;
						if (xf.incremental) {
							xf.valueChanged(content);
						}
					};
				} else if (xf.type.name === "base64Binary") {
					fr.onload = function(e) {
						var bytes = new Uint8Array(e.target.result);
						var b64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
						var len = bytes.length;
						bytes[len] = bytes[len+1] = 0;
						for( var i = 0; i < len; i += 3) {
							var c1 = bytes[i] >> 2;
							var c2 = ((bytes[i] & 3) << 4) | (bytes[i+1] >> 4);
							var c3 = ((bytes[i+1] & 15) << 2) | (bytes[i+2] >> 6);
							var c4 = bytes[i+2] & 63;
							if( i === len - 1) {
								c3 = c4 = 64;
							} else if( i === len -2) {
								c4 = 64;
							}
							content += b64.charAt(c1) + b64.charAt(c2) + b64.charAt(c3) + b64.charAt(c4);
						}
						xf.value = content;
						if (xf.incremental) {
							xf.valueChanged(content);
						}
					};
				} else {
					fr.onload = function(e) {
						XsltForms_upload.contents[xf.element.id] = e.target.result;
						xf.value = "file://" + filename + "?id=" + xf.element.id;
						if (xf.incremental) {
							xf.valueChanged(xf.value);
						}
					};
				}
				fr.readAsArrayBuffer(file);
			}
		} catch (e) {
			content = XsltForms_browser.readFile(xf.input.value, "ISO-8859-1", xf.type.name, "");
			if (xf.type.name === "anyURI") {
				xf.value = "file://" + filename + "?id=" + xf.element.id;
				XsltForms_upload.contents[xf.element.id] = content;
			} else {
				xf.value = content;
			}
			if (xf.incremental) {
				xf.valueChanged(xf.value);
			}
		}
		if(this.filename && this.filename.bind_evaluate) {
			var filenameref = this.filename.bind_evaluate(this.element.node)[0];
			if (filenameref) {
				XsltForms_globals.openAction("XsltForms_upload.prototype.change");
				XsltForms_browser.setValue(filenameref, filename || "");
				var model = document.getElementById(XsltForms_browser.getDocMeta(filenameref.ownerDocument, "model")).xfElement;
				model.addChange(filenameref);
				XsltForms_xmlevents.dispatch(model, "xforms-recalculate");
				XsltForms_globals.refresh();
				XsltForms_globals.closeAction("XsltForms_upload.prototype.change");
			}
		}
	}
};

]]>
	</cm:source>
</cm:component>