<cm:component xmlns:cm="http://www.agencexml.com/cm" name="XFInput.js">
	<cm:author>Alain Couthures</cm:author>
	<cm:creationdate>2012-03-29</cm:creationdate>
	<cm:lastupdate>2009-03-29</cm:lastupdate>
	<cm:licence>
Copyright (C) 2008-2010 &lt;agenceXML&gt; - Alain COUTHURES
Contact at : &lt;info@agencexml.com&gt;

Copyright (C) 2006 AJAXForms S.L.
Contact at: &lt;info@ajaxforms.com&gt;

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
	</cm:licence>
	<cm:source type="text/javascript">
		<cm:wiki>
=== "XsltForms_upload" class ===
Upload Control  Class
* constructor function : initializes specific properties including aid button management</cm:wiki>
		<![CDATA[
function XsltForms_upload(subform, id, valoff, binding, incremental, filename, mediatype, aidButton, clone) {
	XsltForms_globals.counters.upload++;
	this.init(subform, id);
	this.binding = binding;
	this.incremental = incremental;
	this.filename = filename;
	var cells = this.element.children;
	this.valoff = valoff;
	this.cell = cells[valoff];
	this.input = this.cell.children[0];
	this.isClone = clone;
	this.hasBinding = true;
	this.bolAidButton = aidButton;
	this.mediatype = mediatype;
	this.value = "";
	this.initFocus(this.cell.children[0], true);
	if (!window.FileReader && !(document.applets.xsltforms || document.getElementById("xsltforms_applet"))) {
		XsltForms_browser.loadapplet();
	}
	if (aidButton) {
		this.aidButton = cells[valoff + 1].children[0];
		this.initFocus(this.aidButton);
	}
}

XsltForms_upload.prototype = new XsltForms_control();

]]>
		<cm:wiki>
* '''clone''' method : creates a new upload with the given id</cm:wiki>
<![CDATA[
XsltForms_upload.prototype.clone = function(id) { 
	return new XsltForms_input(this.subform, id, this.valoff, this.binding, this.incremental, this.filename, this.mediatype, this.bolAidButton, true);
};

]]>
		<cm:wiki>
* '''dispose''' method : clears properties of this element and calls the parent dispose() method</cm:wiki>
<![CDATA[
XsltForms_upload.prototype.dispose = function() {
	this.cell = null;
	XsltForms_globals.counters.upload--;
	XsltForms_control.prototype.dispose.call(this);
};

]]>
		<cm:wiki>
* '''setValue''' method : sets the value of this input control according to its type</cm:wiki>
<![CDATA[
XsltForms_upload.prototype.setValue = function(value) {
	var node = this.element.node;
	this.type = node ? XsltForms_schema.getType(XsltForms_browser.getType(node) || "xsd_:string") : XsltForms_schema.getType("xsd_:string");
	if (this.value !== value) {
		this.value = value || "";
	}
};

]]>
		<cm:wiki>
* '''blur''' method : manages the blur event when not in incremental mode</cm:wiki>
<![CDATA[
XsltForms_upload.prototype.blur = function(target) {
	XsltForms_globals.focus = null;
	if (!this.incremental) {
		XsltForms_browser.assert(this.input, this.element.id);
		this.valueChanged(this.value);
	}
};

]]>
		<cm:wiki>
* '''directclick'' method : directly manages the click event</cm:wiki>
<![CDATA[
XsltForms_upload.prototype.directclick = function() {
	if (window.FileReader || this.type.name === "anyURI") {
		return true;
	}
	if (this.type.nsuri !== "http://www.w3.org/2001/XMLSchema" || (this.type.name !== "anyURI" && this.type.name !== "base64Binary" && this.type.name !== "hexBinary")) {
		alert("Unexpected type for upload control: " + this.type.nsuri + " " + this.type.name);
		throw "Error";
	} else {
		var filename = "unselected";
		this.value = XsltForms_browser.readFile("", "ISO-8859-1", this.type.name, "XSLTForms Java Upload");
		if (document.applets.xsltforms) {
			filename = document.applets.xsltforms.lastChosenFileName;
		} else {
			if( document.getElementById("xsltforms_applet") ) {
				filename = document.getElementById("xsltforms_applet").xsltforms.lastChosenFileName;
			}
		}
		filename = filename.split('\\').pop();
		this.input.value = filename;
		if (this.incremental) {
			this.valueChanged(this.value);
		}
		if(this.filename.evaluate) {
			var filenameref = this.filename.evaluate(this.element.node)[0];
			if (filenameref) {
				XsltForms_globals.openAction();
				XsltForms_browser.setValue(filenameref, filename || "");
				var model = document.getElementById(XsltForms_browser.getMeta(filenameref.ownerDocument.documentElement, "model")).xfElement;
				model.addChange(filenameref);
				XsltForms_xmlevents.dispatch(model, "xforms-recalculate");
				XsltForms_globals.refresh();
				XsltForms_globals.closeAction();
			}
		}
	}
	return false;
};

]]>
		<cm:wiki>
* '''change'' method : manages the change event</cm:wiki>
<![CDATA[
XsltForms_upload.prototype.change = function() {
	if (this.type.nsuri !== "http://www.w3.org/2001/XMLSchema" || (this.type.name !== "anyURI" && this.type.name !== "base64Binary" && this.type.name !== "hexBinary")) {
		alert("Unexpected type for upload control: " + this.type.nsuri + " " + this.type.name);
		throw "Error";
	} else {
		var filename = "unselected";
		if (this.type.name === "anyURI") {
			filename = this.input.value;
			filename = filename.split('\\').pop();
			this.value = filename;
			if (this.incremental) {
				this.valueChanged(filename);
			}
		} else {
			var value = "";
			var xf = this;
			try {
				var fr = new FileReader();
				var file = xf.input.files[0];
				if( !file ) {
					alert("No file!?!");
					return;
				}
				filename = file.name;
				if( xf.type.name === "hexBinary" ) {
					fr.onload = function(e) {
						var bytes = new Uint8Array(e.target.result);
						for( var i = 0, len = bytes.length; i < len; i++) {
							var c = bytes[i] >> 4;
							var d = bytes[i] & 0xF;
							value += String.fromCharCode(c > 9 ? c + 55 : c + 48, d > 9 ? d + 55 : d + 48);
						}
						xf.value = value;
						if (xf.incremental) {
							xf.valueChanged(value);
						}
					}
				} else {
					fr.onload = function(e) {
						var bytes = new Uint8Array(e.target.result);
						var b64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
						var len = bytes.length;
						bytes[len] = bytes[len+1] = 0;
						for( var i = 0; i < len; i += 3) {
							var c1 = bytes[i] >> 2;
							var c2 = ((bytes[i] & 3) << 4) | (bytes[i+1] >> 4);
							var c3 = ((bytes[i+1] & 15) << 2) | (bytes[i+2] >> 6);
							var c4 = bytes[i+2] & 63;
							if( i === len - 1) {
								c3 = c4 = 64;
							} else if( i === len -2) {
								c4 = 64;
							}
							value += b64.charAt(c1) + b64.charAt(c2) + b64.charAt(c3) + b64.charAt(c4);
						}
						xf.value = value;
						if (xf.incremental) {
							xf.valueChanged(value);
						}
					}
				}
				fr.readAsArrayBuffer(file);
			} catch (e) {
				xf.value = XsltForms_browser.readFile(xf.input.value, "ISO-8859-1", xf.type.name, "");
				if (xf.incremental) {
					xf.valueChanged(xf.value);
				}
			}
		}
		if(this.filename.evaluate) {
			var filenameref = this.filename.evaluate(this.element.node)[0];
			if (filenameref) {
				XsltForms_globals.openAction();
				XsltForms_browser.setValue(filenameref, filename || "");
				var model = document.getElementById(XsltForms_browser.getMeta(filenameref.ownerDocument.documentElement, "model")).xfElement;
				model.addChange(filenameref);
				XsltForms_xmlevents.dispatch(model, "xforms-recalculate");
				XsltForms_globals.refresh();
				XsltForms_globals.closeAction();
			}
		}
	}
};

]]>
	</cm:source>
</cm:component>