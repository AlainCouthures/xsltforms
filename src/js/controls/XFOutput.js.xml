<cm:component xmlns:cm="http://www.agencexml.com/cm" name="XFOutput.js">
	<cm:author>Alain Couthures</cm:author>
	<cm:creationdate>2009-04-07</cm:creationdate>
	<cm:lastupdate>2011-11-01</cm:lastupdate>
	<cm:licence>
Copyright (C) 2008-2010 &lt;agenceXML&gt; - Alain COUTHURES
Contact at : &lt;info@agencexml.com&gt;

Copyright (C) 2006 AJAXForms S.L.
Contact at: &lt;info@ajaxforms.com&gt;

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
	</cm:licence>
	<cm:source type="text/javascript">
		<cm:wiki>
=== "XsltForms_output" class ===
Output Control  Class
* constructor function : initializes specific properties and initializes focus and blur event management</cm:wiki>
		<![CDATA[
function XsltForms_output(subform, id, valoff, binding, mediatype) {
	XsltForms_globals.counters.output++;
	this.init(subform, id);
	this.controlName = "output";
	this.valoff = valoff;
	var children = this.element.children || this.element.childNodes;
	if (children.length !== 0) {
		var cells = children;
		this.valueElement = cells[valoff];
	} else {
		this.valueElement = this.element;
	}
	var valuechildren = this.valueElement.children || this.valueElement.childNodes;
	if (valuechildren.length !== 0) {
		this.valueElement = valuechildren[0];
	}
	this.hasBinding = true;
	this.binding = binding;
	this.mediatype = mediatype;
	this.complex = mediatype === "application/xhtml+xml";
	this.isOutput = true;
	if (this.binding && this.binding.type) {
		XsltForms_browser.setClass(this.element, "xforms-disabled", false);
	}
}

XsltForms_output.prototype = new XsltForms_control();

]]>
		<cm:wiki>
* '''clone''' method : creates a new output control with the given id</cm:wiki>
<![CDATA[
XsltForms_output.prototype.clone = function(id) { 
	return new XsltForms_output(this.subform, id, this.valoff, this.binding, this.mediatype);
};

]]>
		<cm:wiki>
* '''dispose''' method : clears properties of this control and calls the parent dispose() method</cm:wiki>
<![CDATA[
XsltForms_output.prototype.dispose = function() {
	this.valueElement = null;
	XsltForms_globals.counters.output--;
	XsltForms_control.prototype.dispose.call(this);
};

]]>
		<cm:wiki>
* '''setValue''' method : sets the value of this output control</cm:wiki>
<![CDATA[
XsltForms_output.prototype.setValue = function(value) {
	var element = this.valueElement;
	if (element.nodeName.toLowerCase() === "span" || element.nodeName.toLowerCase() === "tspan" || element.nodeName.toLowerCase() === "label") {
		if (this.mediatype === "application/xhtml+xml") {
			while (element.firstChild) {
				element.removeChild(element.firstChild);
			}
			if (value) {
				element.innerHTML = value;
			}
		} else if (this.mediatype === "image/svg+xml") {
			while (element.firstChild) {
				element.removeChild(element.firstChild);
			}
			if (XsltForms_browser.isIE && !XsltForms_browser.isIE9) {
				var xamlScript = XsltForms_browser.isXhtml ? document.createElementNS("http://www.w3.org/1999/xhtml", "script") : document.createElement("script");
				xamlScript.setAttribute("type", "text/xaml");
				xamlScript.setAttribute("id", this.element.id+"-xaml");
				xamlScript.text = XsltForms_browser.transformText(value, XsltForms_browser.ROOT + "svg2xaml.xsl", false, "width", element.currentStyle.width, "height", element.currentStyle.height);
				element.appendChild(xamlScript);
				var xamlObject = XsltForms_browser.isXhtml ? document.createElementNS("http://www.w3.org/1999/xhtml", "object") : document.createElement("object");
				xamlObject.setAttribute("width", element.currentStyle.width+"px");
				xamlObject.setAttribute("height", element.currentStyle.height+"px");
				xamlObject.setAttribute("type", "application/x-silverlight");
				xamlObject.setAttribute("style", "min-width: " + element.currentStyle.width+"px");
				//xamlObject.setAttribute("style", "min-width: " + xamlScript.text.substring(xamlScript.text.indexOf('<Canvas Width="')+15,xamlScript.text.indexOf('" Height="')) + "px");
				var xamlParamSource = XsltForms_browser.isXhtml ? document.createElementNS("http://www.w3.org/1999/xhtml", "param") : document.createElement("param");
				xamlParamSource.setAttribute("name", "source");
				xamlParamSource.setAttribute("value", "#"+this.element.id+"-xaml");
				xamlObject.appendChild(xamlParamSource);
				var xamlParamOnload = XsltForms_browser.isXhtml ? document.createElementNS("http://www.w3.org/1999/xhtml", "param") : document.createElement("param");
				xamlParamOnload.setAttribute("name", "onload");
				xamlParamOnload.setAttribute("value", "onLoaded");
				xamlObject.appendChild(xamlParamOnload);
				var xamlParamIswindowless = XsltForms_browser.isXhtml ? document.createElementNS("http://www.w3.org/1999/xhtml", "param") : document.createElement("param");
				xamlParamIswindowless.setAttribute("name", "iswindowless");
				xamlParamIswindowless.setAttribute("value", "true");
				xamlObject.appendChild(xamlParamIswindowless);
				element.appendChild(xamlObject);
			} else if (XsltForms_browser.isXhtml) {
				var cs = window.getComputedStyle(element, null);
				XDocument.parse(value, element);
				element.firstChild.setAttribute("width", cs.getPropertyValue("min-width"));
				element.firstChild.setAttribute("height", cs.getPropertyValue("min-height"));
			} else {
				var svgObject = XsltForms_browser.isXhtml ? document.createElementNS("http://www.w3.org/1999/xhtml", "object") : document.createElement("object");
				svgObject.setAttribute("type", "image/svg+xml");
				svgObject.setAttribute("data", "data:image/svg+xml,"+ value);
				//svgObject.setAttribute("height", "400px");
				element.appendChild(svgObject);
			}
		} else {
			XsltForms_browser.setValue(element, value);
		}
	} else {
		element.src = value;
	}
};
]]>
		<cm:wiki>
* '''getValue''' method : gets the value of this output control</cm:wiki>
<![CDATA[
XsltForms_output.prototype.getValue = function(format) {
	var element = this.valueElement;
	if (element.nodeName.toLowerCase() === "span") {
		return XsltForms_browser.getValue(element, format);
	} else {
		var value = element.src;
		if (value && format && element.type.format) {
			try { 
				value = element.type.format(value);
			} catch(e) { 
			}
		}
		return value;
	}
};
]]>
	</cm:source>
</cm:component>