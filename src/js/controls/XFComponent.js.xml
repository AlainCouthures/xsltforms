<cm:component xmlns:cm="http://www.agencexml.com/cm" name="XFOutput.js">
	<cm:author>Alain Couthures</cm:author>
	<cm:creationdate>2009-04-07</cm:creationdate>
	<cm:lastupdate>2011-11-01</cm:lastupdate>
	<cm:licence>
Copyright (C) 2008-2010 &lt;agenceXML&gt; - Alain COUTHURES
Contact at : &lt;info@agencexml.com&gt;

Copyright (C) 2006 AJAXForms S.L.
Contact at: &lt;info@ajaxforms.com&gt;

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
	</cm:licence>
	<cm:source type="text/javascript">
		<cm:wiki>
=== "XsltForms_output" class ===
Output Control  Class
* constructor function : initializes specific properties and initializes focus and blur event management</cm:wiki>
		<![CDATA[
function XsltForms_component(subform, id, valoff, binding, href) {
	XsltForms_globals.counters.component++;
	this.init(subform, id);
	this.valoff = valoff;
	var children = this.element.children || this.element.childNodes;
	if (children.length !== 0) {
		var cells = children;
		this.valueElement = cells[valoff];
	} else {
		this.valueElement = this.element;
	}
	this.hasBinding = true;
	this.binding = binding;
	this.resource = href;
	this.isComponent = true;
	if (this.binding && this.binding.type) {
		XsltForms_browser.setClass(this.element, "xforms-disabled", false);
	}
	//this.subformid = "xsltforms-subform-" + XsltForms_globals.nbsubforms;
	var req = null;
	var method = "get";
	// var evcontext = {"method": method, "resource-uri": href};
	try {
		req = XsltForms_browser.openRequest(method, href, false);
		XsltForms_browser.debugConsole.write("Load Component " + href);
		req.send(null);
		if (req.status !== 0 && (req.status < 200 || req.status >= 300)) {
			return;
		}
		var resp = req.responseText;
		var piindex = resp.indexOf("<?xml-stylesheet", 0);
		while ( piindex !== -1) {
			var xslhref = resp.substr(piindex, resp.substr(piindex).indexOf("?>")).replace(/^.*href=\"([^\"]*)\".*$/, "$1");
			resp = XsltForms_browser.transformText(resp, xslhref, false);
			piindex = resp.indexOf("<?xml-stylesheet", 0);
		}
		var sp = XsltForms_globals.stringSplit(resp, "XsltForms_MagicSeparator");
		var subbody, subjs;
		var targetelt = this.valueElement;
		if (sp.length === 1) {
			subbody = resp;
		} else {
			subjs = "/* xsltforms-subform-" + XsltForms_globals.nbsubforms + " " + sp[2] + " xsltforms-subform-" + XsltForms_globals.nbsubforms + " */";
			var imain = subjs.indexOf('"xsltforms-mainform"');
			var targetsubform = targetelt.xfSubform;
			if (targetsubform) {
				targetsubform.dispose();
			}
			subjs = '(function(){var xsltforms_subform_eltid = "' + id + '";var xsltforms_parentform = XsltForms_subform.subforms["' + this.subform.id + '"];' + subjs.substring(0, imain) + '"xsltforms-subform-' + XsltForms_globals.nbsubforms + '"' + subjs.substring(imain + 20) + "})();";
			imain = subjs.indexOf('"xsltforms-mainform-instance-default"');
			while (imain !== -1) {
				subjs = subjs.substring(0, imain) + '"xsltforms-subform-' + XsltForms_globals.nbsubforms + '-instance-default"' + subjs.substring(imain + 37);
				imain = subjs.indexOf('"xsltforms-mainform-instance-default"');
			}
			subbody = "<!-- xsltforms-subform-" + XsltForms_globals.nbsubforms + " " + sp[4] + " xsltforms-subform-" + XsltForms_globals.nbsubforms + " -->";
			imain = subbody.indexOf(' id="xsltforms-mainform');
			while (imain !== -1) {
				subbody = subbody.substring(0, imain) + ' id="xsltforms-subform-' + XsltForms_globals.nbsubforms + subbody.substring(imain + 23);
				imain = subbody.indexOf(' id="xsltforms-mainform');
			}
		}
		targetelt.innerHTML = subbody;
		targetelt.hasXFElement = null;
		var parent = targetelt.parentNode;
		while (parent) {
			if (parent.hasXFElement !== false) {
				break;
			}
			parent.hasXFElement = null;
			parent = parent.parentNode;
		}
		if (sp.length !== 1) {
			XsltForms_globals.componentLoads.push(subjs);
			this.subjs = subjs;
			this.evaljs = true;
		}
		XsltForms_browser.setClass(targetelt, "xforms-subform-loaded", true);
		XsltForms_globals.nbsubforms++;
	} catch(e2) {
		XsltForms_browser.debugConsole.write(e2.message || e2);
	}
}

XsltForms_component.prototype = new XsltForms_control();

]]>
		<cm:wiki>
* '''clone''' method : creates a new output control with the given id</cm:wiki>
<![CDATA[
XsltForms_component.prototype.clone = function(id) { 
	return new XsltForms_component(this.subform, id, this.valoff, this.binding, this.resource);
};

]]>
		<cm:wiki>
* '''dispose''' method : clears properties of this control and calls the parent dispose() method</cm:wiki>
<![CDATA[
XsltForms_component.prototype.dispose = function() {
	this.valueElement = null;
	XsltForms_globals.counters.component--;
	XsltForms_control.prototype.dispose.call(this);
};

]]>
		<cm:wiki>
* '''blur''' method : empty method</cm:wiki>
<![CDATA[
XsltForms_component.prototype.blur = function () { };

]]>
		<cm:wiki>
* '''setValue''' method : sets the value of this component control</cm:wiki>
<![CDATA[
XsltForms_component.prototype.setValue = function(value) {
	XsltForms_browser.forEach(this.valueElement.children[0].xfElement.subform.binds, "propagate");
};
]]>
	</cm:source>
</cm:component>